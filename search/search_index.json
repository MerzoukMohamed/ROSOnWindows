{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"ROS for Windows People have always been fascinated by robots. Today advanced robots are changing our lives, both at work and at home. Warehouse robots have enabled next-day deliveries to online shoppers, and many pet owners rely on robotic vacuums to keep their floors clean. Industries as diverse as manufacturing, transportation, healthcare, and real estate are seeing benefits from robots. As robots have advanced, so have the development tools. Many developers leverage the Robot Operating System (ROS) , a set of libraries and tools which help you build complex robots. ROS is used in many cutting-edge robotic projects around the world. Microsoft is excited to announce an experimental release of ROS1 for Windows. This will bring the manageability and security of Windows 10 IoT Enterprise to the innovative ROS ecosystem. Windows has been a trusted part of robotic and industrial systems for decades. With ROS for Windows, developers will be able to use the familiar Visual Studio toolset along with rich AI and cloud features. We\u2019re looking forward to bringing the intelligent edge to robotics by exposing advanced features like hardware accelerated Windows Machine Learning, computer vision, Azure Cognitive Services, Azure IoT cloud services, and other Microsoft technologies to home, education, commercial, and industrial robots. Manufacturers want to make robots more aware of their surroundings, easier to program and safer to be around. Governments, manufacturers, and academics around the world are investing in the next generation of manufacturing, sometimes referred to as \u201cIndustry 4.0\u201d. Microsoft is working with Open Robotics and the ROS Industrial Consortium to bring the Robot Operating System to Windows. Microsoft has joined the ROS Industrial Consortium whose mission is to extend the advanced capabilities of ROS to manufacturing and improve the productivity and return on investment of industrial robots. At ROSCon 2018 in Madrid, Spain, Microsoft demonstrated a Robotis Turtlebot 3 robot, running the ROS release known as Melodic Morenia, that recognized and steered toward the closest person to the robot. The robot runs Windows 10 IoT Enterprise on an Intel Coffee Lake NUC using a new ROS node which leverages hardware accelerated Windows Machine Learning. Microsoft also showcased a ROS simulation environment running in Azure. It demonstrated a swarm of robots running in a virtual world connected to an orchestration system and controlled via Azure IoT Hub. Microsoft will host the Windows builds for ROS1 and shortly ROS2, as well as provide documentation, development and deployment solutions for Windows. Working with ROS on Windows Install ROS on Windows Are you new to ROS? Learn about the differences between ROS on Windows and ROS on Linux Porting Status Help and Troubleshooting Getting Started with Turtlebot3 (UPDATED: Gazebo + Cartographer example added) Getting Started with Moveit! and UR3 Continuous Integration with ROS on Windows About the Azure DevOps buildfarm for ROS on Windows Buiding ROS for Windows from Source Using ROS with Azure ROS for Azure IoT Hub","title":"Home"},{"location":"index.html#ros-for-windows","text":"People have always been fascinated by robots. Today advanced robots are changing our lives, both at work and at home. Warehouse robots have enabled next-day deliveries to online shoppers, and many pet owners rely on robotic vacuums to keep their floors clean. Industries as diverse as manufacturing, transportation, healthcare, and real estate are seeing benefits from robots. As robots have advanced, so have the development tools. Many developers leverage the Robot Operating System (ROS) , a set of libraries and tools which help you build complex robots. ROS is used in many cutting-edge robotic projects around the world. Microsoft is excited to announce an experimental release of ROS1 for Windows. This will bring the manageability and security of Windows 10 IoT Enterprise to the innovative ROS ecosystem. Windows has been a trusted part of robotic and industrial systems for decades. With ROS for Windows, developers will be able to use the familiar Visual Studio toolset along with rich AI and cloud features. We\u2019re looking forward to bringing the intelligent edge to robotics by exposing advanced features like hardware accelerated Windows Machine Learning, computer vision, Azure Cognitive Services, Azure IoT cloud services, and other Microsoft technologies to home, education, commercial, and industrial robots. Manufacturers want to make robots more aware of their surroundings, easier to program and safer to be around. Governments, manufacturers, and academics around the world are investing in the next generation of manufacturing, sometimes referred to as \u201cIndustry 4.0\u201d. Microsoft is working with Open Robotics and the ROS Industrial Consortium to bring the Robot Operating System to Windows. Microsoft has joined the ROS Industrial Consortium whose mission is to extend the advanced capabilities of ROS to manufacturing and improve the productivity and return on investment of industrial robots. At ROSCon 2018 in Madrid, Spain, Microsoft demonstrated a Robotis Turtlebot 3 robot, running the ROS release known as Melodic Morenia, that recognized and steered toward the closest person to the robot. The robot runs Windows 10 IoT Enterprise on an Intel Coffee Lake NUC using a new ROS node which leverages hardware accelerated Windows Machine Learning. Microsoft also showcased a ROS simulation environment running in Azure. It demonstrated a swarm of robots running in a virtual world connected to an orchestration system and controlled via Azure IoT Hub. Microsoft will host the Windows builds for ROS1 and shortly ROS2, as well as provide documentation, development and deployment solutions for Windows.","title":"ROS for Windows"},{"location":"index.html#working-with-ros-on-windows","text":"Install ROS on Windows Are you new to ROS? Learn about the differences between ROS on Windows and ROS on Linux Porting Status Help and Troubleshooting Getting Started with Turtlebot3 (UPDATED: Gazebo + Cartographer example added) Getting Started with Moveit! and UR3 Continuous Integration with ROS on Windows About the Azure DevOps buildfarm for ROS on Windows Buiding ROS for Windows from Source","title":"Working with ROS on Windows"},{"location":"index.html#using-ros-with-azure","text":"ROS for Azure IoT Hub","title":"Using ROS with Azure"},{"location":"Build/buildfarm.html","text":"The BuildFarm for ROS on Windows The BuildFarm is a public service which is made of a set of tools and Azure DevOps pipelines to continuously build\\test\\deliver Open Robotics ROS for Windows developer community. Build Status Build Pipeline Build Status ros-catkin-build(melodic) ros-colon-build(melodic) ros-colon-build(crystal) ros-colon-build(dashing) rosdep-au-packages Test Results Test Pipeline Test Status runtests.ros.melodic.desktop runtests.ros.melodic.ros_base ROS System Dependencies on Windows ROS target platforms defines a set of tools and packages which ROS packages depends on. Those tools and packages are also called ROS system dependencies, and they can be deployed by rosdep for any supported platforms. On Windows, Chocolatey is chosen as the default package manager for pre-built packages delivery, rosdep is extended to support Chocolatey and pip on Windows platform, and https://roswin.azurewebsites.net is created to host them for Windows developers. rosdep.yaml is also extended for Windows. Every ROS on Windows environment gets additional manifest files. For example, win-chocolatey.yaml defines what Chocolatey or pip packages to install when Windows developers uses rosdep to resolve dependencies. Azure DevOps Pipelines for System Dependencies Everytime an new package is identified to be onboarded for Windows. The pre-built binaries are generated offline and uploaded to rosdep-au-packages repository. It is an automatic packaging repository using Chocolatey Automatic Package Updater Module , and the deployment is automated in Azure DevOps. When a package is added or updated, rosdep-au-packages CI pipeline will be triggered, and it starts packaging and generating .nupkg files. After the packaging pipeline finishes, ROSDEP to ROSWIN Public Chocolatey Server pipeline will be triggered in turn and publishing those newly added\\updated packages to https://roswin.azurewebsites.net. ROS Build on Windows The Open Source Robotics Foundation (OSRF) maintains public buildfarm for the community. Package maintainers can make use of this public services to release ROS packages in sources or pre-built binaries on certain platforms. Likewise, the Buildfarm for ROS on Windows is an equivalent service to complement Windows developer community. Nightly Upstream Build Pipelines One goal of the buildfarm is to make sure every ROS packages built from the upstream (the latest) source code. It is important to catch any regressions as early as possible. ros-catkin-build/azure-pipelines.yml is the entry point for the build. It kicks off source installation on Azure DevOps and the binaries are packaged into Chocolatey packages. Pre-built Binaries Release Pipelines Whenever a nightly build finishes successfully, a deployment will start in turn, which publishes the Chocolatey packages to https://roswin.azurewebsites.net. The nightly builds will be firstly published as prerelease packages, and a prerelease package can be promoted to a release package when it mets quality criteria.","title":"Build Status"},{"location":"Build/buildfarm.html#the-buildfarm-for-ros-on-windows","text":"The BuildFarm is a public service which is made of a set of tools and Azure DevOps pipelines to continuously build\\test\\deliver Open Robotics ROS for Windows developer community.","title":"The BuildFarm for ROS on Windows"},{"location":"Build/buildfarm.html#build-status","text":"Build Pipeline Build Status ros-catkin-build(melodic) ros-colon-build(melodic) ros-colon-build(crystal) ros-colon-build(dashing) rosdep-au-packages","title":"Build Status"},{"location":"Build/buildfarm.html#test-results","text":"Test Pipeline Test Status runtests.ros.melodic.desktop runtests.ros.melodic.ros_base","title":"Test Results"},{"location":"Build/buildfarm.html#ros-system-dependencies-on-windows","text":"ROS target platforms defines a set of tools and packages which ROS packages depends on. Those tools and packages are also called ROS system dependencies, and they can be deployed by rosdep for any supported platforms. On Windows, Chocolatey is chosen as the default package manager for pre-built packages delivery, rosdep is extended to support Chocolatey and pip on Windows platform, and https://roswin.azurewebsites.net is created to host them for Windows developers. rosdep.yaml is also extended for Windows. Every ROS on Windows environment gets additional manifest files. For example, win-chocolatey.yaml defines what Chocolatey or pip packages to install when Windows developers uses rosdep to resolve dependencies.","title":"ROS System Dependencies on Windows"},{"location":"Build/buildfarm.html#azure-devops-pipelines-for-system-dependencies","text":"Everytime an new package is identified to be onboarded for Windows. The pre-built binaries are generated offline and uploaded to rosdep-au-packages repository. It is an automatic packaging repository using Chocolatey Automatic Package Updater Module , and the deployment is automated in Azure DevOps. When a package is added or updated, rosdep-au-packages CI pipeline will be triggered, and it starts packaging and generating .nupkg files. After the packaging pipeline finishes, ROSDEP to ROSWIN Public Chocolatey Server pipeline will be triggered in turn and publishing those newly added\\updated packages to https://roswin.azurewebsites.net.","title":"Azure DevOps Pipelines for System Dependencies"},{"location":"Build/buildfarm.html#ros-build-on-windows","text":"The Open Source Robotics Foundation (OSRF) maintains public buildfarm for the community. Package maintainers can make use of this public services to release ROS packages in sources or pre-built binaries on certain platforms. Likewise, the Buildfarm for ROS on Windows is an equivalent service to complement Windows developer community.","title":"ROS Build on Windows"},{"location":"Build/buildfarm.html#nightly-upstream-build-pipelines","text":"One goal of the buildfarm is to make sure every ROS packages built from the upstream (the latest) source code. It is important to catch any regressions as early as possible. ros-catkin-build/azure-pipelines.yml is the entry point for the build. It kicks off source installation on Azure DevOps and the binaries are packaged into Chocolatey packages.","title":"Nightly Upstream Build Pipelines"},{"location":"Build/buildfarm.html#pre-built-binaries-release-pipelines","text":"Whenever a nightly build finishes successfully, a deployment will start in turn, which publishes the Chocolatey packages to https://roswin.azurewebsites.net. The nightly builds will be firstly published as prerelease packages, and a prerelease package can be promoted to a release package when it mets quality criteria.","title":"Pre-built Binaries Release Pipelines"},{"location":"Build/fromsource.html","text":"Install ROS for Windows from source As an alternative to using Chocolatey, ROS for Windows can also be installed from source . ROS Environment Command Prompt When running ROS, open an elevated Command Prompt with the following setup: c:\\opt\\ros\\melodic\\x64\\setup.bat If you are building catkin projects, use the Visual Studio x64 command line shortcut that was created earlier to launch a Command Prompt or execute the following command in the current Command Prompt to make Visual Studio build tools discoverable for CMake: \"c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\VsDevCmd.bat\" -arch=amd64 -host_arch=amd64","title":"Fromsource"},{"location":"Build/fromsource.html#install-ros-for-windows-from-source","text":"As an alternative to using Chocolatey, ROS for Windows can also be installed from source .","title":"Install ROS for Windows from source"},{"location":"Build/fromsource.html#ros-environment-command-prompt","text":"When running ROS, open an elevated Command Prompt with the following setup: c:\\opt\\ros\\melodic\\x64\\setup.bat If you are building catkin projects, use the Visual Studio x64 command line shortcut that was created earlier to launch a Command Prompt or execute the following command in the current Command Prompt to make Visual Studio build tools discoverable for CMake: \"c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\VsDevCmd.bat\" -arch=amd64 -host_arch=amd64","title":"ROS Environment Command Prompt"},{"location":"Build/rosdeps_vcpkg.html","text":"[WIP] Vcpkg, ROS1 system dependencies, and Azure DevOps CI integration In ROS1, there are many open sources project required as a minimum to run ROS desktop stack. In the beginning, we either privately built the libraries by project-specific build instructions or looked for stock binaries if it just works. This approach works fine for the very initial ROS1 porting to manage the initial set of open sources libraries. However, we are also seeing problems with this method: * Build Instruction Management (How-to-build-xyz): Every new project could come with its owned way to build end-to-end. We should share the knowledge in a managible way. * Updatibility: Using stock binaries, it would be a bottleneck for us to upgrade its downstream projects (thinking about ABI changes or compatiblity), unless we know how to build them. * Latest Visual C++ toolchain support: Not every project keeps its build instructions or code up-to-dated for the latest Visual C++ toolchain. We want the binaries always come from the best of breed. To address those issues, we are looking for any leverages to solve them. Here Vcpkg comes. Vcpkg \"Vcpkg simplifies acquiring and building open source libraries on Windows.\" - Visual C++ Team Blog It comes with the following features: * Managing the how-to-build sauces of eight hundred and more open-source projects. And it is still growing! * Clear visibility on the dependencies relationship between projects. Now we can better manage what to update after an upstream project gets updated. * Everything is compiled against the same set of depedencies, so no more ABI hazards. Now let's take a look ROS1 system dependencies for Windows (as of today). ROS1 System Dependencies (Target: Melodic Windows 10) To evalute switching to Vcpkg, firstly we'd like to know anything missing from Vcpkg ports. After comparison, we see most of packages to exist on Vcpkg. Only few don't exist and need some more investigations: * libompl * log4cxx * libgraphviz * pkg-config Also, some projects are Python modules mixing C/C++ sources (e.g., pyside2), and Vcpkg currently doesn't manage this type of projects. References ROS1 Target Platforms Comparsion Table of ROS1 System Dependencies and vcpkg ports (snap at 2019/09/29 ) package version vcpkg port link note libflann 1.9.1 2019-04-07-1 (based on 1.9.1 ) flann zlib 1.2.11 1.2.11-5 zlib octomap 1.9.0 2017-03-11-7 (based on 1.8.0 ) octomap minor version libglew 2.1.0 2.1.0-6 glew ogre 1.10.11 1.12.1 ogre minor version libompl 1.2.2 1.4.2-2 ompl minor version assimp 4.0.1 5.0.0 assimp major version boost 1.66.0 1.71.0 boost minor version bullet3 2.87.0 2.88-1 bullet3 minor version bzip2 1.0.6 1.0.6-4 bzip2 console_bridge 0.4.0 0.4.3-1 console-bridge libccd 2.0.0 2.1-1 ccd minor version libcurl 7.58.0 7.66.0 curl minor version libfcl 0.5.0 0.5.0-6 fcl libjpeg-turbo 1.5.3 2.0.2 libjepg-turbo major version libopencv 3.4.1 4.1.1-1 opencv major version cppunit 1.12.1 1.14.0 cppunit minor version libpng 1.6.35 1.6.37-4 libpng eigen 3.3.4 3.3.7-3 eigen3 libqhull 2015.2.0 7.3.2-1 (based on 2019.1 ) qhull major version freeglut 3.0.0 3.0.0-7 freeglut log4cxx 0.10.0 N/A missing google-mock 1.8.0 2019-08-14-2 (based on 1.9.0 ) gtest minor version cairo 1.15.12 1.16.0-2 cairo minor version google-test 1.8.0 2019-08-14-2 (based on 1.9.0 ) gtest minor version gtk2 2.22.1 N/A missing gtk3 3.22.19 3.22.19-3 gtk poco 1.8.1 1.9.2-1 poco minor version pyqt5 5.10.1 N/A Python OpenNI unsure N/A missing OpenNI2 unsure 2.2.0.33-10 openni2 clapack 3.2.1 3.2.1-12 clapack gflags 2.2.1 2.2.2-1 gflags pyside2 5.10.1 N/A Python glog 0.3.5 0.4.0-2 glog minor version openblas 0.2.20 0.3.6-6 openblas minor version suitesparse unsure 5.4.0-3 suitesparse metis 5.1.0 5.1.0-5 metis sdl 1.2.15 1.2.15-8 sdl1 protobuf 3.6.1 3.9.1 protobuf minor version freeimage 3.17.0 3.18.0-7 freeimage minor version cppzmq 4.2.2 4.4.1 cppzmq minor version zeromq 4.2.5 2019-09-20 (based on 4.3.3 ) zeromq minor version dlfcn-win32 1.1.1 1.1.1-3 dlfcn-win32 libwebp 0.6.1 1.0.2-7 libwebp major version openjpeg 2.3.0 2.3.1-1 openjpeg tiff 4.0.9 4.0.10-7 tiff ilmbase 2.2.1 2.3.0 ilmbase minor version sdl_image 1.2.12 N/A missing jxrlib 1.1.0 1.1-8 jxrlib sip 4.19.8 N/A Python tinyxml 2.6.2 2.6.2-4 tinyxml libraw 0.19.0 201903-1 (based on 0.19.0 ) libraw tinyxml2 6.1.0 7.0.1-2 tinyxml2 major version liblzma 5.2.4 5.2.4-2 liblzma urdfdom 1.0.0 1.0.3-1 urdfdom openexr 2.2.1 2.3.0-4 openexr minor version urdfdom_headers 1.0.0 1.0.4-1 urdfdom-headers lcms 2.8.0 2.9 lcms minor version yaml-cpp 0.5.3 0.6.2-3 yaml-cpp minor version jasper 2.0.14 2.0.16-2 jasper ceres 1.14.0 1.14.0-6 ceres qwt 6.1.3 6.1.3-8 qwt gazebo9 9.4.1 N/A missing libfltk 1.3.4 1.3.4-7 fltk libtbb-dev 2018.6.0 2019_U8-1 tbb libgraphviz 2.41.0 N/A missing lz4 1.8.1 1.9.2 lz4 minor version openssl 1.1.1 1.0.2s-1 openssl-windows minor version orocos_kdl 1.3.1 1.4-2 orocos-kdl minor version pkg-config 0.29.2 N/A missing qt5-sdk 5.10.1 5.12.5 qt5 minor version libtheora 1.1.1 1.2.0alpha1-20170719~vcpkg1-3 libtheora minor version libogg 1.3.3 1.3.4 libogg libpcl 1.8.1 1.9.1-9 pcl minor version libazure-iot-sdk-c 1.2.10 2019-08-20.1 (based on 1.3.4 ) azure-iot-sdk-c minor version libqglviewer 2.7.1 2.7.0-2 libqglviewer","title":"[WIP] Vcpkg, ROS1 system dependencies, and Azure DevOps CI integration"},{"location":"Build/rosdeps_vcpkg.html#wip-vcpkg-ros1-system-dependencies-and-azure-devops-ci-integration","text":"In ROS1, there are many open sources project required as a minimum to run ROS desktop stack. In the beginning, we either privately built the libraries by project-specific build instructions or looked for stock binaries if it just works. This approach works fine for the very initial ROS1 porting to manage the initial set of open sources libraries. However, we are also seeing problems with this method: * Build Instruction Management (How-to-build-xyz): Every new project could come with its owned way to build end-to-end. We should share the knowledge in a managible way. * Updatibility: Using stock binaries, it would be a bottleneck for us to upgrade its downstream projects (thinking about ABI changes or compatiblity), unless we know how to build them. * Latest Visual C++ toolchain support: Not every project keeps its build instructions or code up-to-dated for the latest Visual C++ toolchain. We want the binaries always come from the best of breed. To address those issues, we are looking for any leverages to solve them. Here Vcpkg comes.","title":"[WIP] Vcpkg, ROS1 system dependencies, and Azure DevOps CI integration"},{"location":"Build/rosdeps_vcpkg.html#vcpkg","text":"\"Vcpkg simplifies acquiring and building open source libraries on Windows.\" - Visual C++ Team Blog It comes with the following features: * Managing the how-to-build sauces of eight hundred and more open-source projects. And it is still growing! * Clear visibility on the dependencies relationship between projects. Now we can better manage what to update after an upstream project gets updated. * Everything is compiled against the same set of depedencies, so no more ABI hazards. Now let's take a look ROS1 system dependencies for Windows (as of today).","title":"Vcpkg"},{"location":"Build/rosdeps_vcpkg.html#ros1-system-dependencies-target-melodic-windows-10","text":"To evalute switching to Vcpkg, firstly we'd like to know anything missing from Vcpkg ports. After comparison, we see most of packages to exist on Vcpkg. Only few don't exist and need some more investigations: * libompl * log4cxx * libgraphviz * pkg-config Also, some projects are Python modules mixing C/C++ sources (e.g., pyside2), and Vcpkg currently doesn't manage this type of projects.","title":"ROS1 System Dependencies (Target: Melodic Windows 10)"},{"location":"Build/rosdeps_vcpkg.html#references","text":"ROS1 Target Platforms Comparsion Table of ROS1 System Dependencies and vcpkg ports (snap at 2019/09/29 ) package version vcpkg port link note libflann 1.9.1 2019-04-07-1 (based on 1.9.1 ) flann zlib 1.2.11 1.2.11-5 zlib octomap 1.9.0 2017-03-11-7 (based on 1.8.0 ) octomap minor version libglew 2.1.0 2.1.0-6 glew ogre 1.10.11 1.12.1 ogre minor version libompl 1.2.2 1.4.2-2 ompl minor version assimp 4.0.1 5.0.0 assimp major version boost 1.66.0 1.71.0 boost minor version bullet3 2.87.0 2.88-1 bullet3 minor version bzip2 1.0.6 1.0.6-4 bzip2 console_bridge 0.4.0 0.4.3-1 console-bridge libccd 2.0.0 2.1-1 ccd minor version libcurl 7.58.0 7.66.0 curl minor version libfcl 0.5.0 0.5.0-6 fcl libjpeg-turbo 1.5.3 2.0.2 libjepg-turbo major version libopencv 3.4.1 4.1.1-1 opencv major version cppunit 1.12.1 1.14.0 cppunit minor version libpng 1.6.35 1.6.37-4 libpng eigen 3.3.4 3.3.7-3 eigen3 libqhull 2015.2.0 7.3.2-1 (based on 2019.1 ) qhull major version freeglut 3.0.0 3.0.0-7 freeglut log4cxx 0.10.0 N/A missing google-mock 1.8.0 2019-08-14-2 (based on 1.9.0 ) gtest minor version cairo 1.15.12 1.16.0-2 cairo minor version google-test 1.8.0 2019-08-14-2 (based on 1.9.0 ) gtest minor version gtk2 2.22.1 N/A missing gtk3 3.22.19 3.22.19-3 gtk poco 1.8.1 1.9.2-1 poco minor version pyqt5 5.10.1 N/A Python OpenNI unsure N/A missing OpenNI2 unsure 2.2.0.33-10 openni2 clapack 3.2.1 3.2.1-12 clapack gflags 2.2.1 2.2.2-1 gflags pyside2 5.10.1 N/A Python glog 0.3.5 0.4.0-2 glog minor version openblas 0.2.20 0.3.6-6 openblas minor version suitesparse unsure 5.4.0-3 suitesparse metis 5.1.0 5.1.0-5 metis sdl 1.2.15 1.2.15-8 sdl1 protobuf 3.6.1 3.9.1 protobuf minor version freeimage 3.17.0 3.18.0-7 freeimage minor version cppzmq 4.2.2 4.4.1 cppzmq minor version zeromq 4.2.5 2019-09-20 (based on 4.3.3 ) zeromq minor version dlfcn-win32 1.1.1 1.1.1-3 dlfcn-win32 libwebp 0.6.1 1.0.2-7 libwebp major version openjpeg 2.3.0 2.3.1-1 openjpeg tiff 4.0.9 4.0.10-7 tiff ilmbase 2.2.1 2.3.0 ilmbase minor version sdl_image 1.2.12 N/A missing jxrlib 1.1.0 1.1-8 jxrlib sip 4.19.8 N/A Python tinyxml 2.6.2 2.6.2-4 tinyxml libraw 0.19.0 201903-1 (based on 0.19.0 ) libraw tinyxml2 6.1.0 7.0.1-2 tinyxml2 major version liblzma 5.2.4 5.2.4-2 liblzma urdfdom 1.0.0 1.0.3-1 urdfdom openexr 2.2.1 2.3.0-4 openexr minor version urdfdom_headers 1.0.0 1.0.4-1 urdfdom-headers lcms 2.8.0 2.9 lcms minor version yaml-cpp 0.5.3 0.6.2-3 yaml-cpp minor version jasper 2.0.14 2.0.16-2 jasper ceres 1.14.0 1.14.0-6 ceres qwt 6.1.3 6.1.3-8 qwt gazebo9 9.4.1 N/A missing libfltk 1.3.4 1.3.4-7 fltk libtbb-dev 2018.6.0 2019_U8-1 tbb libgraphviz 2.41.0 N/A missing lz4 1.8.1 1.9.2 lz4 minor version openssl 1.1.1 1.0.2s-1 openssl-windows minor version orocos_kdl 1.3.1 1.4-2 orocos-kdl minor version pkg-config 0.29.2 N/A missing qt5-sdk 5.10.1 5.12.5 qt5 minor version libtheora 1.1.1 1.2.0alpha1-20170719~vcpkg1-3 libtheora minor version libogg 1.3.3 1.3.4 libogg libpcl 1.8.1 1.9.1-9 pcl minor version libazure-iot-sdk-c 1.2.10 2019-08-20.1 (based on 1.3.4 ) azure-iot-sdk-c minor version libqglviewer 2.7.1 2.7.0-2 libqglviewer","title":"References"},{"location":"Build/source.html","text":"Installing from source (ROS for Windows) Install from source requires that you download and compile the source code on your own. This page is organized as the same way as ROS\\Installation\\Source . This page is still working in progress. Prerequisites Installing toolchains Follow the Prerequisites section from Setup.md to install Visual Studio Build Tool 2017, Cmake, and Chocolatey. Please note that ROS for Windows expects the 64-bit Python2.7 to be installed under C:\\opt\\python27amd64\\ . Installing bootstrap dependencies These tools are used to facilitate the download and management of ROS packages and their dependencies, among other things. Generic (pip): If you are using a non-Debian system you need to make sure that you have all build tools (compiler, CMake, etc.) installed. You can install all ROS Python tools via PIP: pip install -U rosdep rosinstall_generator wstool rosinstall curl --output requirements.txt -L https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/rosdistro_cache/catkin-requirements.txt pip install -U --no-deps --force-reinstall -r requirements.txt If there are errors with this or the rosdep step below, your system's version of pip may be out-of-date. Use your system's package management to update it, or use it to update itself: python -m pip install -U pip setuptools Initializing rosdep rosdep init curl --output 10-ms-iot.list -L https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/rosdep/sources.list.d/10-ms-iot.list copy 10-ms-iot.list c:\\etc\\ros\\rosdep\\sources.list.d rosdep update The 10-ms-iot.list points to the rosdep database of ROS for Windows and it will be evaulated before the default source list. Configure Chocolatey sources choco source add -n=ros-win -s=\"https://roswin.azurewebsites.net/api/v2\" --priority=1 choco source disable -n=chocolatey This will add roswin Chocolatey server as a source to discover libraries and tools. Also disable the default one to avoid any potential package naming conflicts. Installation Start by building the core ROS packages. Create a catkin Workspace In order to build the core packages, you will need a catkin workspace. Create one now: mkdir c:\\ros_catkin_ws cd c:\\ros_catkin_ws Next we will want to fetch the core packages so we can build them. We will use wstool for this. Select the wstool command for the particular variant you want to install: Desktop Install (recommended): ROS, rqt, rviz, and robot-generic libraries set ROSDISTRO_INDEX_URL=https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/index.yaml rosinstall_generator desktop --rosdistro melodic --deps --upstream-development > melodic-desktop.rosinstall wstool init src melodic-desktop.rosinstall ROS-Comm: (Bare Bones) ROS package, build, and communication libraries. No GUI tools. set ROSDISTRO_INDEX_URL=https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/index.yaml rosinstall_generator ros_comm --rosdistro melodic --deps --upstream-development > melodic-ros_comm.rosinstall wstool init src melodic-ros_comm.rosinstall This will add all of the catkin packages in the given variant and then fetch the sources into the ~/ros_catkin_ws/src directory. The command will take a few minutes to download all of the core ROS packages into the src folder. Resolving Dependencies Before you can build your catkin workspace you need to make sure that you have all the required dependencies. We use the rosdep tool for this: rosdep install --from-paths src --ignore-src --rosdistro melodic -r -y This will look at all of the packages in the src directory and find all of the dependencies they have. Then it will recursively install the dependencies. The --from-paths option indicates we want to install the dependencies for an entire directory of packages, in this case src. The --ignore-src option indicates to rosdep that it shouldn't try to install any ROS packages in the src folder from the package manager, we don't need it to since we are building them ourselves. The --rosdistro option is required because we don't have a ROS environment setup yet, so we have to indicate to rosdep what version of ROS we are building for. Finally, the -y option indicates to rosdep that we don't want to be bothered by too many prompts from the package manager. After a while (and maybe some prompts for your password) rosdep will finish installing system dependencies and you can continue. Building the catkin Workspace Once it has completed downloading the packages and resolving the dependencies you are ready to build the catkin packages. We will use the catkin_make_isolated command because there are both catkin and plain cmake packages in the base install, when developing on your catkin only workspaces you may choose to use catkin/commands/catkin_make which only works with catkin packages. Invoke catkin_make_isolated: set PATH=c:\\opt\\rosdeps\\x64\\bin;%PATH% copy \".\\src\\catkin\\bin\\catkin_make_isolated\" \".\\src\\catkin\\bin\\catkin_make_isolated.py\" python .\\src\\catkin\\bin\\catkin_make_isolated.py --use-nmake --install ^ --install-space c:/opt/ros/melodic/x64 ^ -DCMAKE_BUILD_TYPE=Release ^ -DCMAKE_PREFIX_PATH=c:/opt/ros/melodic/x64;c:/opt/rosdeps/x64 The rosdep BIN path needs to be added to PATH so catkin can find the build tools (e.g. CMake). Now the packages should have been installed to c:/opt/ros/melodic/x64 or to wherever you specified with the --install-space argument. If you look in that directory you will see that a setup.bash file have been generated. To utilize the things installed there simply source that file like so: c:\\opt\\ros\\melodic\\x64\\setup.bat","title":"Source Installation"},{"location":"Build/source.html#installing-from-source-ros-for-windows","text":"Install from source requires that you download and compile the source code on your own. This page is organized as the same way as ROS\\Installation\\Source . This page is still working in progress.","title":"Installing from source (ROS for Windows)"},{"location":"Build/source.html#prerequisites","text":"","title":"Prerequisites"},{"location":"Build/source.html#installing-toolchains","text":"Follow the Prerequisites section from Setup.md to install Visual Studio Build Tool 2017, Cmake, and Chocolatey. Please note that ROS for Windows expects the 64-bit Python2.7 to be installed under C:\\opt\\python27amd64\\ .","title":"Installing toolchains"},{"location":"Build/source.html#installing-bootstrap-dependencies","text":"These tools are used to facilitate the download and management of ROS packages and their dependencies, among other things. Generic (pip): If you are using a non-Debian system you need to make sure that you have all build tools (compiler, CMake, etc.) installed. You can install all ROS Python tools via PIP: pip install -U rosdep rosinstall_generator wstool rosinstall curl --output requirements.txt -L https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/rosdistro_cache/catkin-requirements.txt pip install -U --no-deps --force-reinstall -r requirements.txt If there are errors with this or the rosdep step below, your system's version of pip may be out-of-date. Use your system's package management to update it, or use it to update itself: python -m pip install -U pip setuptools","title":"Installing bootstrap dependencies"},{"location":"Build/source.html#initializing-rosdep","text":"rosdep init curl --output 10-ms-iot.list -L https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/rosdep/sources.list.d/10-ms-iot.list copy 10-ms-iot.list c:\\etc\\ros\\rosdep\\sources.list.d rosdep update The 10-ms-iot.list points to the rosdep database of ROS for Windows and it will be evaulated before the default source list.","title":"Initializing rosdep"},{"location":"Build/source.html#configure-chocolatey-sources","text":"choco source add -n=ros-win -s=\"https://roswin.azurewebsites.net/api/v2\" --priority=1 choco source disable -n=chocolatey This will add roswin Chocolatey server as a source to discover libraries and tools. Also disable the default one to avoid any potential package naming conflicts.","title":"Configure Chocolatey sources"},{"location":"Build/source.html#installation","text":"Start by building the core ROS packages.","title":"Installation"},{"location":"Build/source.html#create-a-catkin-workspace","text":"In order to build the core packages, you will need a catkin workspace. Create one now: mkdir c:\\ros_catkin_ws cd c:\\ros_catkin_ws Next we will want to fetch the core packages so we can build them. We will use wstool for this. Select the wstool command for the particular variant you want to install: Desktop Install (recommended): ROS, rqt, rviz, and robot-generic libraries set ROSDISTRO_INDEX_URL=https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/index.yaml rosinstall_generator desktop --rosdistro melodic --deps --upstream-development > melodic-desktop.rosinstall wstool init src melodic-desktop.rosinstall ROS-Comm: (Bare Bones) ROS package, build, and communication libraries. No GUI tools. set ROSDISTRO_INDEX_URL=https://raw.githubusercontent.com/ms-iot/rosdistro-db/init_windows/index.yaml rosinstall_generator ros_comm --rosdistro melodic --deps --upstream-development > melodic-ros_comm.rosinstall wstool init src melodic-ros_comm.rosinstall This will add all of the catkin packages in the given variant and then fetch the sources into the ~/ros_catkin_ws/src directory. The command will take a few minutes to download all of the core ROS packages into the src folder.","title":"Create a catkin Workspace"},{"location":"Build/source.html#resolving-dependencies","text":"Before you can build your catkin workspace you need to make sure that you have all the required dependencies. We use the rosdep tool for this: rosdep install --from-paths src --ignore-src --rosdistro melodic -r -y This will look at all of the packages in the src directory and find all of the dependencies they have. Then it will recursively install the dependencies. The --from-paths option indicates we want to install the dependencies for an entire directory of packages, in this case src. The --ignore-src option indicates to rosdep that it shouldn't try to install any ROS packages in the src folder from the package manager, we don't need it to since we are building them ourselves. The --rosdistro option is required because we don't have a ROS environment setup yet, so we have to indicate to rosdep what version of ROS we are building for. Finally, the -y option indicates to rosdep that we don't want to be bothered by too many prompts from the package manager. After a while (and maybe some prompts for your password) rosdep will finish installing system dependencies and you can continue.","title":"Resolving Dependencies"},{"location":"Build/source.html#building-the-catkin-workspace","text":"Once it has completed downloading the packages and resolving the dependencies you are ready to build the catkin packages. We will use the catkin_make_isolated command because there are both catkin and plain cmake packages in the base install, when developing on your catkin only workspaces you may choose to use catkin/commands/catkin_make which only works with catkin packages. Invoke catkin_make_isolated: set PATH=c:\\opt\\rosdeps\\x64\\bin;%PATH% copy \".\\src\\catkin\\bin\\catkin_make_isolated\" \".\\src\\catkin\\bin\\catkin_make_isolated.py\" python .\\src\\catkin\\bin\\catkin_make_isolated.py --use-nmake --install ^ --install-space c:/opt/ros/melodic/x64 ^ -DCMAKE_BUILD_TYPE=Release ^ -DCMAKE_PREFIX_PATH=c:/opt/ros/melodic/x64;c:/opt/rosdeps/x64 The rosdep BIN path needs to be added to PATH so catkin can find the build tools (e.g. CMake). Now the packages should have been installed to c:/opt/ros/melodic/x64 or to wherever you specified with the --install-space argument. If you look in that directory you will see that a setup.bash file have been generated. To utilize the things installed there simply source that file like so: c:\\opt\\ros\\melodic\\x64\\setup.bat","title":"Building the catkin Workspace"},{"location":"GettingStarted/NewToROS.html","text":"New ROS Users The Robot Operating System is a powerful tool for creating Robots with advanced behaviors. Using ROS is a skill by itself, and like all skills takes time and energy to become proficient and eventually master. To support the new ROS user, the ROS community create a set of tutortials which walk through the basics through advanced usage of ROS. Visit the Tutorial Wiki . These tutorials were written for ROS on Linux. While running through the tutorials, please refer to Using ROS for Windows .","title":"Getting Started"},{"location":"GettingStarted/NewToROS.html#new-ros-users","text":"The Robot Operating System is a powerful tool for creating Robots with advanced behaviors. Using ROS is a skill by itself, and like all skills takes time and energy to become proficient and eventually master. To support the new ROS user, the ROS community create a set of tutortials which walk through the basics through advanced usage of ROS. Visit the Tutorial Wiki . These tutorials were written for ROS on Linux. While running through the tutorials, please refer to Using ROS for Windows .","title":"New ROS Users"},{"location":"GettingStarted/Setup.html","text":"Setup Getting Started Firstly, go to ROS on Windows installation and follow the steps on the Wiki page. Now you are all set to further explore ROS Tutorials . Microsoft has a staging fork of the ROS tutorials which should be used instead of the repository in the tutorials. If you are new to ROS on Windows, please visit the Differences between ROS on Windows and ROS on Linux page which describes some differences you'll encounter between what you see in the ROS tutorials and running on Windows. Getting Help If you need help with ROS or ROS on Windows, please check out the troubleshooting page","title":"Binary Installation"},{"location":"GettingStarted/Setup.html#setup","text":"","title":"Setup"},{"location":"GettingStarted/Setup.html#getting-started","text":"Firstly, go to ROS on Windows installation and follow the steps on the Wiki page. Now you are all set to further explore ROS Tutorials . Microsoft has a staging fork of the ROS tutorials which should be used instead of the repository in the tutorials. If you are new to ROS on Windows, please visit the Differences between ROS on Windows and ROS on Linux page which describes some differences you'll encounter between what you see in the ROS tutorials and running on Windows.","title":"Getting Started"},{"location":"GettingStarted/Setup.html#getting-help","text":"If you need help with ROS or ROS on Windows, please check out the troubleshooting page","title":"Getting Help"},{"location":"GettingStarted/SetupCI.html","text":"Set up Continuous Integration with ROS on Windows To all ROS package maintainers, we encourage to utilize ROS on Windows to continuously keep the code stay stable on Windows system. Here are projects which help you easily getting started: rosonwindows_ci : This project defines Azure DevOps build templates, which you can simply include it in your ROS project.","title":"Continuous Integration Template"},{"location":"GettingStarted/SetupCI.html#set-up-continuous-integration-with-ros-on-windows","text":"To all ROS package maintainers, we encourage to utilize ROS on Windows to continuously keep the code stay stable on Windows system. Here are projects which help you easily getting started: rosonwindows_ci : This project defines Azure DevOps build templates, which you can simply include it in your ROS project.","title":"Set up Continuous Integration with ROS on Windows"},{"location":"GettingStarted/Troubleshooting.html","text":"Troubleshooting ROS for Windows The COSINE Robotics feature team is monitoring ROS Answers , ROS Discourse , and the /r/ROS Subreddit . We will try to answer within 48 hours. This page will be updated with environment related problems as we diagnose them with customers. Windows Specific Bugs Please create a GitHub issue on the ROS on Windows GitHub repository . No Visual Studio command line build? If you find that you do not have a Visual Studio command line in your start menu, it likely means that it wasn't installed during Visual Studio setup. To Fix, please launch the Visual Studio installer and select to install the C++ build environment. Failures during Chocolatey install or upgrade We have seen reports of transient errors during install or upgrade of chocolatey packages or dependencies. If you hit a bug such as : ERROR: The running command stopped because the preference variable \"ErrorActionPreference\" or common parameter is set to Stop: Exception: The upgrade of ros-catkin-tools was NOT successful. Error while running 'C:\\ProgramData\\chocolatey\\lib\\ros-catkin-tools\\tools\\chocolateyinstall.ps1'. See log for details. Please try running chocolatey upgrade directly on that package: choco upgrade ros-catkin-tools","title":"Troubleshooting"},{"location":"GettingStarted/Troubleshooting.html#troubleshooting-ros-for-windows","text":"The COSINE Robotics feature team is monitoring ROS Answers , ROS Discourse , and the /r/ROS Subreddit . We will try to answer within 48 hours. This page will be updated with environment related problems as we diagnose them with customers.","title":"Troubleshooting ROS for Windows"},{"location":"GettingStarted/Troubleshooting.html#windows-specific-bugs","text":"Please create a GitHub issue on the ROS on Windows GitHub repository .","title":"Windows Specific Bugs"},{"location":"GettingStarted/Troubleshooting.html#no-visual-studio-command-line-build","text":"If you find that you do not have a Visual Studio command line in your start menu, it likely means that it wasn't installed during Visual Studio setup. To Fix, please launch the Visual Studio installer and select to install the C++ build environment.","title":"No Visual Studio command line build?"},{"location":"GettingStarted/Troubleshooting.html#failures-during-chocolatey-install-or-upgrade","text":"We have seen reports of transient errors during install or upgrade of chocolatey packages or dependencies. If you hit a bug such as : ERROR: The running command stopped because the preference variable \"ErrorActionPreference\" or common parameter is set to Stop: Exception: The upgrade of ros-catkin-tools was NOT successful. Error while running 'C:\\ProgramData\\chocolatey\\lib\\ros-catkin-tools\\tools\\chocolateyinstall.ps1'. See log for details. Please try running chocolatey upgrade directly on that package: choco upgrade ros-catkin-tools","title":"Failures during Chocolatey install or upgrade"},{"location":"GettingStarted/UsingROSonWindows.html","text":"Using ROS on Windows While every effort has been made to reduce the effort needed to support ROS on Windows, there will inevitably be required changes between platforms. This document is intended to address porting OS differences between Linux and Windows. Microsoft has created staging forks for many projects. We will be committing back upstream and removing out forks once they are stabilized on Windows and Linux. Until these changes are committed upstream, please look at the Microsoft ms-iot github to see if there is a fork for the ROS repository you are interested in and use that. Typically, there is also have an init_windows branch which should be used instead of the melodic-devel branch. Tips Use a Tabbed command line manager While working with ROS you will need to have multiple command windows open. Each window you open, you need to load the environment. To assist with managing multiple command lines, ConEmu is a tabbed command line host which works well for managing ROS Command Windows. Debugging a ROS node In many cases, you can launch devenv from within a ROS Command window, then launch the node's executable to debug it. In some cases, you need to debug a node which was launched via ROSLanuch. We've found that the Visual Studio plugin ReAttach works well for attaching to a ROS node when it launches. ROS for VS Code If you use Visual Studio Code, then the ROS for VSCode plugin will be useful. We will be enhancing this for Windows, as well as adding debug options and cloud build connectivity. Windows vs Linux C++ 17 In your CMakeLists.txt add the compile option: add_compile_options(/std:c++latest) Directory Separators Windows uses backslash \\ whereas Linux uses forward slash / . As we encounter path processing, we've been replacing them with the Python or Boost equivelents. User directory Linux has a neat shortcut for refering to the users' home directory ~ . Windows - not so much - Please use %USERPROFILE% when you see ~ in documentation. Paths and ROS commands Many ROS Commands are sensitive to the drive letter they are executed from. This manifests in problems such as rosdeps not resolving correctly. To address this either: * Put all of your ROS workspaces on the C:\\ drive * Link folders from your C:\\ drive to your workspaces. To link a folder on Windows, use the mklink to create a filesystem link from one drive to another.: mkdir d:\\workspaces mklink c:\\workspaces d:\\workspaces Quote handling in command window Cmd.exe is the command processor of command window. Single quotes are not used at all by the cmd.exe except in batch file to enclose the command to run within a FOR /F statement. Cmd.exe handles quoting with double quotes. This is different from Linux that uses single quote as quote character. As encounter quoting on Windows, please use double quote. The following example shows using double quotes around the message contents: rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- \"[2.0, 0.0, 0.0]\" \"[0.0, 0.0, 1.8]\" Beware of aggressive optimization The Microsoft compiler will optimize agressively. This can manifest in strange ways. One instance was in turtlebot3 fake code, is a ROS_ASSERT with a function that only returns true. Nothing else executed. Case sensitivity Linux is case sensitive, whereas Windows is not. We are trying to locate case sensitive areas and fix them. This manifests in odd errors like this: RLException: multiple files named [turtlebot3_robot.launch] in package [turtlebot3_bringup]: - C:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch - c:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch In this case, the ROS_PACKAGE_PATH has a lower case drive letter. Python Shebang Windows does not support Shebang character sequence for automatically launching an interpreter. To support Python nodes on Windows, a few changes need to be made. Shebang in ROS nodes If a ROS node uses Python, please rename the file with the .py extension. Shebang in command line commands If you are producing a command line application which will be installed with Pip, please add a windows wrapper. Errors gtest-NOTFOUND This occurs when linking against gtest instead of ${GTEST_LIBRARIES}. Update target_link_libraries with the macro: target_link_libraries( rtest ${GTEST_LIBRARIES} ${catkin_LIBRARIES} ) Boost::asio Winsock.h has already been included ROS includes Windows.h, but explicitly excludes Winsock.h. Boost's socket_types.h checks for this flag and assumes winsock.h was included. Add the following before boost/asio.hpp: #include <ros/ros.h> #ifdef WIN32 #include <winsock2.h> #endif #include <boost/asio.hpp> Missing Symbols 'M_PI' Add the following to the top of your file #define _USE_MATH_DEFINES Warnings The Microsoft Visual Studio compiler has strict type checking enabled by default. Here are some common warnings. Truncation '=': truncation from 'double' to float '=': truncation from 'size_t' to uint32_t It is best to use the same size primitive throughout a codepath. unreferenced parameters Either remove it, or reference it in a noop block uint8_t unused; unused; Working with Git on Windows symbolic links While symbolic links are natively supported on Linux, they are not fully supported on Windows until around Vista time frame. Some ROS packages' test cases test against the use of symbolic links, for instance, roslib under ros\\core To work with symbolic links on git repos, check documentation from Git for Windows","title":"Windows vs. Linux"},{"location":"GettingStarted/UsingROSonWindows.html#using-ros-on-windows","text":"While every effort has been made to reduce the effort needed to support ROS on Windows, there will inevitably be required changes between platforms. This document is intended to address porting OS differences between Linux and Windows. Microsoft has created staging forks for many projects. We will be committing back upstream and removing out forks once they are stabilized on Windows and Linux. Until these changes are committed upstream, please look at the Microsoft ms-iot github to see if there is a fork for the ROS repository you are interested in and use that. Typically, there is also have an init_windows branch which should be used instead of the melodic-devel branch.","title":"Using ROS on Windows"},{"location":"GettingStarted/UsingROSonWindows.html#tips","text":"","title":"Tips"},{"location":"GettingStarted/UsingROSonWindows.html#use-a-tabbed-command-line-manager","text":"While working with ROS you will need to have multiple command windows open. Each window you open, you need to load the environment. To assist with managing multiple command lines, ConEmu is a tabbed command line host which works well for managing ROS Command Windows.","title":"Use a Tabbed command line manager"},{"location":"GettingStarted/UsingROSonWindows.html#debugging-a-ros-node","text":"In many cases, you can launch devenv from within a ROS Command window, then launch the node's executable to debug it. In some cases, you need to debug a node which was launched via ROSLanuch. We've found that the Visual Studio plugin ReAttach works well for attaching to a ROS node when it launches.","title":"Debugging a ROS node"},{"location":"GettingStarted/UsingROSonWindows.html#ros-for-vs-code","text":"If you use Visual Studio Code, then the ROS for VSCode plugin will be useful. We will be enhancing this for Windows, as well as adding debug options and cloud build connectivity.","title":"ROS for VS Code"},{"location":"GettingStarted/UsingROSonWindows.html#windows-vs-linux","text":"","title":"Windows vs Linux"},{"location":"GettingStarted/UsingROSonWindows.html#c-17","text":"In your CMakeLists.txt add the compile option: add_compile_options(/std:c++latest)","title":"C++ 17"},{"location":"GettingStarted/UsingROSonWindows.html#directory-separators","text":"Windows uses backslash \\ whereas Linux uses forward slash / . As we encounter path processing, we've been replacing them with the Python or Boost equivelents.","title":"Directory Separators"},{"location":"GettingStarted/UsingROSonWindows.html#user-directory","text":"Linux has a neat shortcut for refering to the users' home directory ~ . Windows - not so much - Please use %USERPROFILE% when you see ~ in documentation.","title":"User directory"},{"location":"GettingStarted/UsingROSonWindows.html#paths-and-ros-commands","text":"Many ROS Commands are sensitive to the drive letter they are executed from. This manifests in problems such as rosdeps not resolving correctly. To address this either: * Put all of your ROS workspaces on the C:\\ drive * Link folders from your C:\\ drive to your workspaces. To link a folder on Windows, use the mklink to create a filesystem link from one drive to another.: mkdir d:\\workspaces mklink c:\\workspaces d:\\workspaces","title":"Paths and ROS commands"},{"location":"GettingStarted/UsingROSonWindows.html#quote-handling-in-command-window","text":"Cmd.exe is the command processor of command window. Single quotes are not used at all by the cmd.exe except in batch file to enclose the command to run within a FOR /F statement. Cmd.exe handles quoting with double quotes. This is different from Linux that uses single quote as quote character. As encounter quoting on Windows, please use double quote. The following example shows using double quotes around the message contents: rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- \"[2.0, 0.0, 0.0]\" \"[0.0, 0.0, 1.8]\"","title":"Quote handling in command window"},{"location":"GettingStarted/UsingROSonWindows.html#beware-of-aggressive-optimization","text":"The Microsoft compiler will optimize agressively. This can manifest in strange ways. One instance was in turtlebot3 fake code, is a ROS_ASSERT with a function that only returns true. Nothing else executed.","title":"Beware of aggressive optimization"},{"location":"GettingStarted/UsingROSonWindows.html#case-sensitivity","text":"Linux is case sensitive, whereas Windows is not. We are trying to locate case sensitive areas and fix them. This manifests in odd errors like this: RLException: multiple files named [turtlebot3_robot.launch] in package [turtlebot3_bringup]: - C:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch - c:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch In this case, the ROS_PACKAGE_PATH has a lower case drive letter.","title":"Case sensitivity"},{"location":"GettingStarted/UsingROSonWindows.html#python","text":"","title":"Python"},{"location":"GettingStarted/UsingROSonWindows.html#shebang","text":"Windows does not support Shebang character sequence for automatically launching an interpreter. To support Python nodes on Windows, a few changes need to be made.","title":"Shebang"},{"location":"GettingStarted/UsingROSonWindows.html#shebang-in-ros-nodes","text":"If a ROS node uses Python, please rename the file with the .py extension.","title":"Shebang in ROS nodes"},{"location":"GettingStarted/UsingROSonWindows.html#shebang-in-command-line-commands","text":"If you are producing a command line application which will be installed with Pip, please add a windows wrapper.","title":"Shebang in command line commands"},{"location":"GettingStarted/UsingROSonWindows.html#errors","text":"","title":"Errors"},{"location":"GettingStarted/UsingROSonWindows.html#gtest-notfound","text":"This occurs when linking against gtest instead of ${GTEST_LIBRARIES}. Update target_link_libraries with the macro: target_link_libraries( rtest ${GTEST_LIBRARIES} ${catkin_LIBRARIES} )","title":"gtest-NOTFOUND"},{"location":"GettingStarted/UsingROSonWindows.html#boostasio-winsockh-has-already-been-included","text":"ROS includes Windows.h, but explicitly excludes Winsock.h. Boost's socket_types.h checks for this flag and assumes winsock.h was included. Add the following before boost/asio.hpp: #include <ros/ros.h> #ifdef WIN32 #include <winsock2.h> #endif #include <boost/asio.hpp>","title":"Boost::asio Winsock.h has already been included"},{"location":"GettingStarted/UsingROSonWindows.html#missing-symbols","text":"","title":"Missing Symbols"},{"location":"GettingStarted/UsingROSonWindows.html#m_pi","text":"Add the following to the top of your file #define _USE_MATH_DEFINES","title":"'M_PI'"},{"location":"GettingStarted/UsingROSonWindows.html#warnings","text":"The Microsoft Visual Studio compiler has strict type checking enabled by default. Here are some common warnings.","title":"Warnings"},{"location":"GettingStarted/UsingROSonWindows.html#truncation","text":"'=': truncation from 'double' to float '=': truncation from 'size_t' to uint32_t It is best to use the same size primitive throughout a codepath.","title":"Truncation"},{"location":"GettingStarted/UsingROSonWindows.html#unreferenced-parameters","text":"Either remove it, or reference it in a noop block uint8_t unused; unused;","title":"unreferenced parameters"},{"location":"GettingStarted/UsingROSonWindows.html#working-with-git-on-windows","text":"","title":"Working with Git on Windows"},{"location":"GettingStarted/UsingROSonWindows.html#symbolic-links","text":"While symbolic links are natively supported on Linux, they are not fully supported on Windows until around Vista time frame. Some ROS packages' test cases test against the use of symbolic links, for instance, roslib under ros\\core To work with symbolic links on git repos, check documentation from Git for Windows","title":"symbolic links"},{"location":"GettingStarted/VcpkgAsRosdep.html","text":"Why we marry Vcpkg with Rosdep Today, many ROS packages consume OSS libraries which are much beyond ROS on Windows Chocolatey server for Open Robotics core packages. To enable developers lighting up more ROS packages on Windows, we leverage the Vcpkg community (which has 1000+ OSS libraries ports), and extend rosdep to manage Vcpkg packages which are known to work with ROS on Windows installation. It means ROS developer can either consume the OOS libraries right away if they are in Vcpkg ports, or they can contribute Vcpkg ports back which benefit ROS community. Example Workflow Let's take koboki as an example. After checking out the source code and running rosdep check , two missing requirements are reported from here: libusb-dev and libftdi-dev . They are the rosdep keys, so you will need another look up to see what's the actual package names for platforms. By checking index.ros.org , they are found as libusb-dev and libftdi-dev respectively on Ubuntu. By a further check, they are registered as libftdi-dev (0.20-4build3) and libusb-dev (2:0.1.12-31) on packages.ubuntu.com , which gives us an idea what version to use. Back to Vcpkg, libusb-dev can be found as libusb-win32 . You can do vcpkg install libusb-win32:x64-windows from the ROS command prompt. Since Vcpkg is integrated with your ROS installation already, developers can do catkin_make to iterate on Windows port work. And in this example, libftdi-dev is not found in Vcpkg. It is because the library is not ported yet in Vcpkg. You can make a Vcpkg port for it, and contributethe Vcpkg recipe back to Microsoft\\Vcpkg . As of today, a port for libftdi-dev is contributed back to Vcpkg . After a Windows port finished, developers can send pull request to register Vcpkg port to Rosdep keys (https://github.com/ms-iot/rosdistro-db/blob/init_windows/rosdep/vcpkg.yaml). So the next time for who wants to build koboki, installing the system dependencies can be simplified to by running rosdep install . How do I try it out This new integration is avaiable in the build of 20190617.1.0-pre and above. To try it out, run Chocolatey upgrade to use the prerelease builds: choco upgrade ros-melodic-desktop_full -y --pre Feedback For any feedback, please open an issue on ms-iot\\ROSOnWindows . We will help you there.","title":"Resolving Dependencies by Vcpkg"},{"location":"GettingStarted/VcpkgAsRosdep.html#why-we-marry-vcpkg-with-rosdep","text":"Today, many ROS packages consume OSS libraries which are much beyond ROS on Windows Chocolatey server for Open Robotics core packages. To enable developers lighting up more ROS packages on Windows, we leverage the Vcpkg community (which has 1000+ OSS libraries ports), and extend rosdep to manage Vcpkg packages which are known to work with ROS on Windows installation. It means ROS developer can either consume the OOS libraries right away if they are in Vcpkg ports, or they can contribute Vcpkg ports back which benefit ROS community.","title":"Why we marry Vcpkg with Rosdep"},{"location":"GettingStarted/VcpkgAsRosdep.html#example-workflow","text":"Let's take koboki as an example. After checking out the source code and running rosdep check , two missing requirements are reported from here: libusb-dev and libftdi-dev . They are the rosdep keys, so you will need another look up to see what's the actual package names for platforms. By checking index.ros.org , they are found as libusb-dev and libftdi-dev respectively on Ubuntu. By a further check, they are registered as libftdi-dev (0.20-4build3) and libusb-dev (2:0.1.12-31) on packages.ubuntu.com , which gives us an idea what version to use. Back to Vcpkg, libusb-dev can be found as libusb-win32 . You can do vcpkg install libusb-win32:x64-windows from the ROS command prompt. Since Vcpkg is integrated with your ROS installation already, developers can do catkin_make to iterate on Windows port work. And in this example, libftdi-dev is not found in Vcpkg. It is because the library is not ported yet in Vcpkg. You can make a Vcpkg port for it, and contributethe Vcpkg recipe back to Microsoft\\Vcpkg . As of today, a port for libftdi-dev is contributed back to Vcpkg . After a Windows port finished, developers can send pull request to register Vcpkg port to Rosdep keys (https://github.com/ms-iot/rosdistro-db/blob/init_windows/rosdep/vcpkg.yaml). So the next time for who wants to build koboki, installing the system dependencies can be simplified to by running rosdep install .","title":"Example Workflow"},{"location":"GettingStarted/VcpkgAsRosdep.html#how-do-i-try-it-out","text":"This new integration is avaiable in the build of 20190617.1.0-pre and above. To try it out, run Chocolatey upgrade to use the prerelease builds: choco upgrade ros-melodic-desktop_full -y --pre","title":"How do I try it out"},{"location":"GettingStarted/VcpkgAsRosdep.html#feedback","text":"For any feedback, please open an issue on ms-iot\\ROSOnWindows . We will help you there.","title":"Feedback"},{"location":"Moveit/UR3.html","text":"Getting Started with Moveit! and UR3 on Windows Getting Started with the Moveit! and UR3 on Windows. If you are new to Moveit! or you don't have a real robot, check out Moveit! Tutorials on Windows . Prerequisite This guide assumes you had hands-on experience on running ROSOnWindows from this document. (https://ms-iot.github.io/ROSOnWindows/GettingStarted/Setup.html) This guide requires you have an Universal Robot UR3 with a software version (3.x) Moveit! and UR3 on Windows Installation First, you can get started by installing moveit related packages from ROSOnWindows Chocolatey server. (open a command prompt as admin) > choco upgrade ros-melodic-desktop_full -y > choco upgrade ros-melodic-moveit -y Then, create a workspace, checkout and build the Universal Robot Driver for UR3. (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > mkdir c:\\catkin_ws\\src > cd c:\\catkin_ws\\src > git clone https://github.com/ms-iot/universal_robot -b init_windows > git clone https://github.com/ms-iot/ur_modern_driver -b init_windows > cd c:\\catkin_ws > catkin_make > c:\\catkin_ws\\devel\\setup.bat Now you are almost good to go to run UR3 launch files. Before proceeding, make sure your UR3 controller is on and the network is connected to your dev box. Running UR3 Launch Files Now let's run it! In this example, it requires three launch files to run: One is to run the UR3 driver stack for planning execution, one is to run the UR3 motion planning, and the other one is to run the visualization tool. Let's start the UR3 driver stack: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur_modern_driver ur3_bringup.launch robot_ip:=IP_OF_THE_ROBOT use_lowbandwidth_trajectory_follower:=true Second, run the UR3 motion planning: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur3_moveit_config ur3_moveit_planning_execution.launch Finally, run the visualization tool: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur3_moveit_config moveit_rviz.launch config:=true Known Issue: When you don't see all panels displayed in RViz, try to enter full screen mode and exit (F11) to refresh the windows rendering. Now you are ready to move the robot arm in the visualization tool and start planning and see your arm moving in action! Troubleshoot The arm fails to move and Invalid Trajectory: start point deviates from current robot state more than ... shows in motion planning console window. It is likely the default value of allowed_start_tolerance being too small for you. Before figuring out a reasonable value, edit ur3_moveit_config/launch/move_group.launch and adding allowed_start_tolerance can help: <node name=\"move_group\" launch-prefix=\"$(arg launch_prefix)\" pkg=\"moveit_ros_move_group\" type=\"move_group\" respawn=\"false\" output=\"screen\" args=\"$(arg command_args)\"> ... <param name=\"trajectory_execution/allowed_start_tolerance\" value=\"0.0\"/> <!-- default 0.01, disable 0.0 --> </node> More Information ur_modern_driver Moveit! Tutorials","title":"Universal Robot UR3"},{"location":"Moveit/UR3.html#getting-started-with-moveit-and-ur3-on-windows","text":"Getting Started with the Moveit! and UR3 on Windows. If you are new to Moveit! or you don't have a real robot, check out Moveit! Tutorials on Windows .","title":"Getting Started with Moveit! and UR3 on Windows"},{"location":"Moveit/UR3.html#prerequisite","text":"This guide assumes you had hands-on experience on running ROSOnWindows from this document. (https://ms-iot.github.io/ROSOnWindows/GettingStarted/Setup.html) This guide requires you have an Universal Robot UR3 with a software version (3.x)","title":"Prerequisite"},{"location":"Moveit/UR3.html#moveit-and-ur3-on-windows-installation","text":"First, you can get started by installing moveit related packages from ROSOnWindows Chocolatey server. (open a command prompt as admin) > choco upgrade ros-melodic-desktop_full -y > choco upgrade ros-melodic-moveit -y Then, create a workspace, checkout and build the Universal Robot Driver for UR3. (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > mkdir c:\\catkin_ws\\src > cd c:\\catkin_ws\\src > git clone https://github.com/ms-iot/universal_robot -b init_windows > git clone https://github.com/ms-iot/ur_modern_driver -b init_windows > cd c:\\catkin_ws > catkin_make > c:\\catkin_ws\\devel\\setup.bat Now you are almost good to go to run UR3 launch files. Before proceeding, make sure your UR3 controller is on and the network is connected to your dev box.","title":"Moveit! and UR3 on Windows Installation"},{"location":"Moveit/UR3.html#running-ur3-launch-files","text":"Now let's run it! In this example, it requires three launch files to run: One is to run the UR3 driver stack for planning execution, one is to run the UR3 motion planning, and the other one is to run the visualization tool. Let's start the UR3 driver stack: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur_modern_driver ur3_bringup.launch robot_ip:=IP_OF_THE_ROBOT use_lowbandwidth_trajectory_follower:=true Second, run the UR3 motion planning: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur3_moveit_config ur3_moveit_planning_execution.launch Finally, run the visualization tool: (open a command prompt as admin) > c:\\opt\\ros\\melodic\\x64\\setup.bat > c:\\catkin_ws\\devel\\setup.bat > roslaunch ur3_moveit_config moveit_rviz.launch config:=true Known Issue: When you don't see all panels displayed in RViz, try to enter full screen mode and exit (F11) to refresh the windows rendering. Now you are ready to move the robot arm in the visualization tool and start planning and see your arm moving in action!","title":"Running UR3 Launch Files"},{"location":"Moveit/UR3.html#troubleshoot","text":"The arm fails to move and Invalid Trajectory: start point deviates from current robot state more than ... shows in motion planning console window. It is likely the default value of allowed_start_tolerance being too small for you. Before figuring out a reasonable value, edit ur3_moveit_config/launch/move_group.launch and adding allowed_start_tolerance can help: <node name=\"move_group\" launch-prefix=\"$(arg launch_prefix)\" pkg=\"moveit_ros_move_group\" type=\"move_group\" respawn=\"false\" output=\"screen\" args=\"$(arg command_args)\"> ... <param name=\"trajectory_execution/allowed_start_tolerance\" value=\"0.0\"/> <!-- default 0.01, disable 0.0 --> </node>","title":"Troubleshoot"},{"location":"Moveit/UR3.html#more-information","text":"ur_modern_driver Moveit! Tutorials","title":"More Information"},{"location":"Moveit/moveit_tutorials.html","text":"Moveit! Tutorials on Windows This guide is to show you how to prepare a workspace (for ROS on Windows) for your Moveit! tutorials. Find out more about Moveit!, visit here . Moveit! Binary Installation on Windows First, download the ROS on Windows with Moveit! packages. (open a command prompt as admin) > choco upgrade ros-melodic-moveit -y Create Workspace for Moveit! Tutorials Then, let's download the example code to your workspace. (open a command prompt as admin) > mkdir c:\\moveit_ws\\src > cd c:\\moveit_ws\\src > catkin_init_workspace > git clone https://github.com/ms-iot/moveit_tutorials -b init_windows > git clone https://github.com/ms-iot/panda_moveit_config -b init_windows > git clone https://github.com/frankaemika/franka_ros-release -b release/kinetic/franka_description > cd c:\\moveit_ws > catkin_make After it is built, source the catkin workspace. > c:\\moveit_ws\\devel\\setup.bat Getting Started with Moveit! Tutorials Now you are ready to continue the journal on Moveit! Tutorials .","title":"MoveIt"},{"location":"Moveit/moveit_tutorials.html#moveit-tutorials-on-windows","text":"This guide is to show you how to prepare a workspace (for ROS on Windows) for your Moveit! tutorials. Find out more about Moveit!, visit here .","title":"Moveit! Tutorials on Windows"},{"location":"Moveit/moveit_tutorials.html#moveit-binary-installation-on-windows","text":"First, download the ROS on Windows with Moveit! packages. (open a command prompt as admin) > choco upgrade ros-melodic-moveit -y","title":"Moveit! Binary Installation on Windows"},{"location":"Moveit/moveit_tutorials.html#create-workspace-for-moveit-tutorials","text":"Then, let's download the example code to your workspace. (open a command prompt as admin) > mkdir c:\\moveit_ws\\src > cd c:\\moveit_ws\\src > catkin_init_workspace > git clone https://github.com/ms-iot/moveit_tutorials -b init_windows > git clone https://github.com/ms-iot/panda_moveit_config -b init_windows > git clone https://github.com/frankaemika/franka_ros-release -b release/kinetic/franka_description > cd c:\\moveit_ws > catkin_make After it is built, source the catkin workspace. > c:\\moveit_ws\\devel\\setup.bat","title":"Create Workspace for Moveit! Tutorials"},{"location":"Moveit/moveit_tutorials.html#getting-started-with-moveit-tutorials","text":"Now you are ready to continue the journal on Moveit! Tutorials .","title":"Getting Started with Moveit! Tutorials"},{"location":"Notes/bond/bond-creation-timeout.html","text":"bond timeout issue nodelet works with the manager-children structure, and bond s are formed between the manager and a child to transmit heartbeat data between the 2. bond is essentially a templated class to create publishers and subscribers for the /<manager>/bond topic. Definitions related to this analysis in the Bond class include: the Bond class defines timers for different purposes. The timer related to this issue is the connect_timer_ variable the Bond class initializes all timers with default timeout values. The default timeout value for connect_timer_ is bond::Constants::DEFAULT_CONNECT_TIMEOUT , which is 10.0 seconds by default the Bond class defines both ros::Subscriber sub_ and ros::Publisher pub_ , which are initialized upon Bond::start() When a nodelet requests the manager to load code, a bond (if requested) will also be attempted to be formed. During this process, the nodelet manager and the child talk in the following steps: child sends /load_nodelet service request to manager manager receives /load_nodelet service request and loads nodelet code manager process creates bond by calling bond->start() , and starts sending out heartbeat periodically child receives (success) response from /load_nodelet service request child process creates bond by calling bond->start() , and starts sending out heartbeat periodically the bond class recognizes a connection between 2 process when its subscriber receives the first heartbeat signal from the other process. when the heartbeat signal takes too long to be received, it will mark the connection as timed out. the following is a typical network log when the bond between a nodelet manager process and the nodelet process after removing the timeout. as we can see, the connection ultimately gets established after more than 10 seconds [ INFO] [1562890405.970666100]: creating bond [ed2a422e-61dc-4904-88df-2f37e511b35d] in manager process [ INFO] [1562890405.994268400]: starting bond [0609a515-48ac-4e2e-8a2c-6fd36ef697ff] in nodelet process [ INFO] [1562890406.975367400]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890406.975669500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890406.975161500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890407.000803900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890406.975161500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890407.101340700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890407.200162600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890407.101267700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890407.974825200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890407.975015000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890407.974730900) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890408.000520200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890407.974730900) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890408.000780400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890408.100311500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890408.000661700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890408.975287600]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890408.975501700]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890408.975150700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890409.000731900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890408.975150700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890409.001049400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890409.101234600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890409.000942500) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890409.974813900]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890409.975078600]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890409.974681600) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890410.001003300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890409.974681600) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890410.001354200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890410.100709100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890410.001208600) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890410.975656500]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890410.975812800]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890410.975562800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890411.000465900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890410.975562800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890411.099975500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890411.200872200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890411.099921700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890411.975869200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890411.976046300]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890411.975763300) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890412.000183100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890411.975763300) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890412.100907600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890412.200875300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890412.100867800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890412.976709700]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890412.976921500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890412.976630700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890413.000973600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890412.976630700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890413.100695900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890413.200892500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890413.100656800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890413.975151300]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890413.975465600]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890413.974932100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890414.000426200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890413.974932100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890414.100246400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890414.201452000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890414.100197000) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890414.976412200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890414.976653500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890414.976246100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890415.000773000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890414.976246100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890415.001125100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890415.100916600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890415.001086300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890415.975091500]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890415.975380900]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890415.974927000) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890416.000446900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890415.974927000) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890416.100609400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890416.200165700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890416.100518600) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890416.974734700]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890416.974915000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890416.974628100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890417.000062700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890416.974628100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890417.100349300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890417.200339600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890417.100282800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890417.977415300]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890417.977700000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890417.977267800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890418.000681500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890417.977267800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890418.000986500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890418.101075300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890418.000944100) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890418.975271900]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890418.999782000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890418.975120700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890419.063147200]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890418.975120700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890419.100688200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890419.100421200]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890419.100563900) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890419.200455000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890419.100563900) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890419.975241800]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890419.975373100]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890419.975075500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890420.000584600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890419.975075500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890420.100615700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890420.100336000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890420.100524300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890420.200336100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890420.100524300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff to simplify the explanation, we use the following aliases for the bonds and their publishers and subscribers: bond [ed2a422e-61dc-4904-88df-2f37e511b35d] created in the manager process as b1 , its publisher as b1-pub and subscriber as b1-sub bond [0609a515-48ac-4e2e-8a2c-6fd36ef697ff] created in the nodelet process as b2 , its publisher as b2-pub and subscriber as b2-sub what we have noticed is that even if b2 (in the child process) has started to send out heartbeat signal (its own subscriber-callbacks are getting called), b1 is not getting any heartbeat callback at all for the first few seconds (around 14 seconds). The log indicates: both bonds have been properly initialized publishers and subscribers of both bonds have also been properly initialized b1-sub is not getting signal from b2-pub b2-sub is getting signal from b1-pub as expected Noticing that b1 with its publisher and subscriber are created earlier than b2 and its publisher and subscriber, we can conclude that b1-pub is created earlier than b2-sub (this is because publisher and subscriber creation code is blocking). Meantime, however, b2-pub is created later than b1-sub . Would this be the reason for the behavior above? Searching online would lead us to this question that has been discussed on answers.ros. The root cause for this is that when a publisher is created later than a subscriber, the subscriber takes a long time to establish a connection with the newly emerged publisher. As explained in the \"Node Environment Variables\" section of this ROS documentation , when a machine has more than one network name this problem starts to emerge. To work around it, use the ROS_IP or ROS_HOSTNAME environment variable to specify a designated connection. The network log proves that it works: [ INFO] [1562890762.216079700]: creating bond [469d6a4a-6f6c-40e9-a35a-05526812d10e] in manager process [ INFO] [1562890763.272645100]: starting bond [260dff49-6afa-47a3-b288-fb560cd53edc] in nodelet process [ INFO] [1562890763.220602400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890763.220870700]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890763.220382500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890764.282294900]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890763.220382500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890764.382758000]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890763.382176600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890764.382646800) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890764.482311800]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890764.382646800) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890764.220152000]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890764.220486600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890764.220003500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890765.282785900]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890764.220003500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890765.382817700]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890764.382367100]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890765.382671600) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890765.482481400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890765.382671600) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890765.221731600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890765.222049500]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890765.221565600) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890766.282347400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890765.221565600) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890766.382124800]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890765.381757300]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890766.381970500) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890766.483556400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890766.381970500) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890766.220679800]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890766.221091400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890766.220478900) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890767.282366100]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890766.220478900) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890767.382669700]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890766.382365400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890767.382425100) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890767.482913600]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890767.382425100) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890767.220318200]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890767.220589500]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890767.220160300) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890768.282961200]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890767.220160300) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890768.383043300]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890767.382516700]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890768.382942700) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890768.483124600]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890768.382942700) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890768.219913400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890768.220194100]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890768.219739700) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890769.283423200]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890768.219739700) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890769.382575200]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890768.382076400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890769.382510900) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890769.481919300]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890769.382510900) 260dff49-6afa-47a3-b288-fb560cd53edc","title":"bond timeout issue"},{"location":"Notes/bond/bond-creation-timeout.html#bond-timeout-issue","text":"nodelet works with the manager-children structure, and bond s are formed between the manager and a child to transmit heartbeat data between the 2. bond is essentially a templated class to create publishers and subscribers for the /<manager>/bond topic. Definitions related to this analysis in the Bond class include: the Bond class defines timers for different purposes. The timer related to this issue is the connect_timer_ variable the Bond class initializes all timers with default timeout values. The default timeout value for connect_timer_ is bond::Constants::DEFAULT_CONNECT_TIMEOUT , which is 10.0 seconds by default the Bond class defines both ros::Subscriber sub_ and ros::Publisher pub_ , which are initialized upon Bond::start() When a nodelet requests the manager to load code, a bond (if requested) will also be attempted to be formed. During this process, the nodelet manager and the child talk in the following steps: child sends /load_nodelet service request to manager manager receives /load_nodelet service request and loads nodelet code manager process creates bond by calling bond->start() , and starts sending out heartbeat periodically child receives (success) response from /load_nodelet service request child process creates bond by calling bond->start() , and starts sending out heartbeat periodically the bond class recognizes a connection between 2 process when its subscriber receives the first heartbeat signal from the other process. when the heartbeat signal takes too long to be received, it will mark the connection as timed out. the following is a typical network log when the bond between a nodelet manager process and the nodelet process after removing the timeout. as we can see, the connection ultimately gets established after more than 10 seconds [ INFO] [1562890405.970666100]: creating bond [ed2a422e-61dc-4904-88df-2f37e511b35d] in manager process [ INFO] [1562890405.994268400]: starting bond [0609a515-48ac-4e2e-8a2c-6fd36ef697ff] in nodelet process [ INFO] [1562890406.975367400]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890406.975669500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890406.975161500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890407.000803900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890406.975161500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890407.101340700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890407.200162600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890407.101267700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890407.974825200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890407.975015000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890407.974730900) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890408.000520200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890407.974730900) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890408.000780400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890408.100311500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890408.000661700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890408.975287600]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890408.975501700]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890408.975150700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890409.000731900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890408.975150700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890409.001049400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890409.101234600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890409.000942500) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890409.974813900]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890409.975078600]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890409.974681600) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890410.001003300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890409.974681600) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890410.001354200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890410.100709100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890410.001208600) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890410.975656500]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890410.975812800]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890410.975562800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890411.000465900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890410.975562800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890411.099975500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890411.200872200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890411.099921700) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890411.975869200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890411.976046300]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890411.975763300) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890412.000183100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890411.975763300) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890412.100907600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890412.200875300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890412.100867800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890412.976709700]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890412.976921500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890412.976630700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890413.000973600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890412.976630700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890413.100695900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890413.200892500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890413.100656800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890413.975151300]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890413.975465600]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890413.974932100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890414.000426200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890413.974932100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890414.100246400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890414.201452000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890414.100197000) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890414.976412200]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890414.976653500]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890414.976246100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890415.000773000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890414.976246100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890415.001125100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890415.100916600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890415.001086300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890415.975091500]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890415.975380900]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890415.974927000) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890416.000446900]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890415.974927000) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890416.100609400]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890416.200165700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890416.100518600) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890416.974734700]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890416.974915000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890416.974628100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890417.000062700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890416.974628100) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890417.100349300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890417.200339600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890417.100282800) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890417.977415300]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890417.977700000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890417.977267800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890418.000681500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890417.977267800) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890418.000986500]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890418.101075300]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890418.000944100) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890418.975271900]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890418.999782000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890418.975120700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890419.063147200]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890418.975120700) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890419.100688200]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890419.100421200]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890419.100563900) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890419.200455000]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890419.100563900) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890419.975241800]: ed2a422e-61dc-4904-88df-2f37e511b35d: heartbeat - 1 [ INFO] [1562890419.975373100]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890419.975075500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890420.000584600]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890419.975075500) ed2a422e-61dc-4904-88df-2f37e511b35d [ INFO] [1562890420.100615700]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: heartbeat - 1 [ INFO] [1562890420.100336000]: ed2a422e-61dc-4904-88df-2f37e511b35d: bond status callback - (1562890420.100524300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff [ INFO] [1562890420.200336100]: 0609a515-48ac-4e2e-8a2c-6fd36ef697ff: bond status callback - (1562890420.100524300) 0609a515-48ac-4e2e-8a2c-6fd36ef697ff to simplify the explanation, we use the following aliases for the bonds and their publishers and subscribers: bond [ed2a422e-61dc-4904-88df-2f37e511b35d] created in the manager process as b1 , its publisher as b1-pub and subscriber as b1-sub bond [0609a515-48ac-4e2e-8a2c-6fd36ef697ff] created in the nodelet process as b2 , its publisher as b2-pub and subscriber as b2-sub what we have noticed is that even if b2 (in the child process) has started to send out heartbeat signal (its own subscriber-callbacks are getting called), b1 is not getting any heartbeat callback at all for the first few seconds (around 14 seconds). The log indicates: both bonds have been properly initialized publishers and subscribers of both bonds have also been properly initialized b1-sub is not getting signal from b2-pub b2-sub is getting signal from b1-pub as expected Noticing that b1 with its publisher and subscriber are created earlier than b2 and its publisher and subscriber, we can conclude that b1-pub is created earlier than b2-sub (this is because publisher and subscriber creation code is blocking). Meantime, however, b2-pub is created later than b1-sub . Would this be the reason for the behavior above? Searching online would lead us to this question that has been discussed on answers.ros. The root cause for this is that when a publisher is created later than a subscriber, the subscriber takes a long time to establish a connection with the newly emerged publisher. As explained in the \"Node Environment Variables\" section of this ROS documentation , when a machine has more than one network name this problem starts to emerge. To work around it, use the ROS_IP or ROS_HOSTNAME environment variable to specify a designated connection. The network log proves that it works: [ INFO] [1562890762.216079700]: creating bond [469d6a4a-6f6c-40e9-a35a-05526812d10e] in manager process [ INFO] [1562890763.272645100]: starting bond [260dff49-6afa-47a3-b288-fb560cd53edc] in nodelet process [ INFO] [1562890763.220602400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890763.220870700]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890763.220382500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890764.282294900]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890763.220382500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890764.382758000]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890763.382176600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890764.382646800) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890764.482311800]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890764.382646800) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890764.220152000]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890764.220486600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890764.220003500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890765.282785900]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890764.220003500) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890765.382817700]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890764.382367100]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890765.382671600) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890765.482481400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890765.382671600) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890765.221731600]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890765.222049500]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890765.221565600) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890766.282347400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890765.221565600) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890766.382124800]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890765.381757300]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890766.381970500) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890766.483556400]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890766.381970500) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890766.220679800]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890766.221091400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890766.220478900) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890767.282366100]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890766.220478900) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890767.382669700]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890766.382365400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890767.382425100) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890767.482913600]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890767.382425100) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890767.220318200]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890767.220589500]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890767.220160300) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890768.282961200]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890767.220160300) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890768.383043300]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890767.382516700]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890768.382942700) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890768.483124600]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890768.382942700) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890768.219913400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: heartbeat - 1 [ INFO] [1562890768.220194100]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890768.219739700) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890769.283423200]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890768.219739700) 469d6a4a-6f6c-40e9-a35a-05526812d10e [ INFO] [1562890769.382575200]: 260dff49-6afa-47a3-b288-fb560cd53edc: heartbeat - 1 [ INFO] [1562890768.382076400]: 469d6a4a-6f6c-40e9-a35a-05526812d10e: bond status callback - (1562890769.382510900) 260dff49-6afa-47a3-b288-fb560cd53edc [ INFO] [1562890769.481919300]: 260dff49-6afa-47a3-b288-fb560cd53edc: bond status callback - (1562890769.382510900) 260dff49-6afa-47a3-b288-fb560cd53edc","title":"bond timeout issue"},{"location":"Notes/rosserial/setup.html","text":"Setup rosserial_arduino with ROS on Windows prerequisite ROS on Windows installation: https://github.com/ms-iot/ROSOnWindows/blob/master/GettingStarted/Setup.md Arduino: https://www.arduino.cc/en/Main/Software note: choose Windows Installer (instead of Windows app) to use Arduino with VS Code ~~ optional: VS Code: https://code.visualstudio.com/~~ ~~ optional: VS Code Arduino plugin: https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino~~ Install follow ROS on Windows setup instructions to install ROS on Windows binaries (install from source code works too, but might be more complicated) (if ROS on Windows is already installed) use the following choco upgrade command to make sure you have the latest binaries choco upgrade ros-melodic-desktop -y load ROS on Windows environment with setup.bat , similar to the following command C:\\opt\\ros\\melodic\\x64\\setup.bat note: this step is critical; otherwise all the ROS CLI tools like catkin_make or catkin_make_isolated cannot be used before moving on to rosserial installation, check environment you should see this is ROS environment is loaded >set ros ROS_DISTRO=melodic ROS_ETC_DIR=C:/opt/ros/melodic/x64/etc/ros ROS_MASTER_URI=http://localhost:11311 ROS_PACKAGE_PATH=C:\\opt\\ros\\melodic\\x64\\share ROS_PYTHON_VERSION=2 ROS_ROOT=C:/opt/ros/melodic/x64/share/ros ROS_VERSION=1 >set path Path=C:/opt/rosdeps/x64\\bin;C:/opt/rosdeps/x64\\lib;C:/opt/ros/melodic/x64\\bin;C:/opt/ros/melodic/x64\\lib;... you should see this if Python (for ROS) is added to PATH >set path Path=...;C:\\opt\\python27amd64\\;C:\\opt\\python27amd64\\Scripts;... you should be able to use call Python from command line >python --version Python 2.7.15 create rosserial workspace, clone rosserial , and build note: please use ms-iot:init_windows on Windows until ms-iot changes are upstreamed back to ROS mainline mkdir c:\\ros\\catkin_ws\\rosserial\\src\\ && cd c:\\ros\\catkin_ws\\rosserial\\src\\ git clone https://github.com/ms-iot/rosserial.git -b init_windows cd .. catkin_make_isolated load rosserial environment just have just been built, and setup Arduino environment (assuming current work directory is still c:\\ros\\catkin_ws\\rosserial ) note: these steps are very similar to the steps (for Ubuntu) in rosserial_arduino tutorials .\\install_isolated\\setup.bat rosrun rosserial_arduino make_libraries.py . at this point, a new folder called ros_lib should have been generated, copy that to the library folder for Arduino library folder for Arduino could be found through these steps: launch Arduino Open File\\Preferences find Sketchbook location, the path would be <path>\\Arduino Arduino's library path would be <path>\\Arduino\\libraries check if ros_lib is installed correctly for Arduino launch Arduino (close and relaunch if needed) check File\\Examples there sould be ros_lib under Examples from Custom Libraries explore rosserial by following its tutorials note: certain #define flags need to be added for specific platforms, check rosserial_arduino for details - especially, add #define USE_USBCON for Arduino based on 32u4: Leonardo, Micro","title":"Setup `rosserial_arduino` with ROS on Windows"},{"location":"Notes/rosserial/setup.html#setup-rosserial_arduino-with-ros-on-windows","text":"","title":"Setup rosserial_arduino with ROS on Windows"},{"location":"Notes/rosserial/setup.html#prerequisite","text":"ROS on Windows installation: https://github.com/ms-iot/ROSOnWindows/blob/master/GettingStarted/Setup.md Arduino: https://www.arduino.cc/en/Main/Software note: choose Windows Installer (instead of Windows app) to use Arduino with VS Code ~~ optional: VS Code: https://code.visualstudio.com/~~ ~~ optional: VS Code Arduino plugin: https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino~~","title":"prerequisite"},{"location":"Notes/rosserial/setup.html#install","text":"follow ROS on Windows setup instructions to install ROS on Windows binaries (install from source code works too, but might be more complicated) (if ROS on Windows is already installed) use the following choco upgrade command to make sure you have the latest binaries choco upgrade ros-melodic-desktop -y load ROS on Windows environment with setup.bat , similar to the following command C:\\opt\\ros\\melodic\\x64\\setup.bat note: this step is critical; otherwise all the ROS CLI tools like catkin_make or catkin_make_isolated cannot be used before moving on to rosserial installation, check environment you should see this is ROS environment is loaded >set ros ROS_DISTRO=melodic ROS_ETC_DIR=C:/opt/ros/melodic/x64/etc/ros ROS_MASTER_URI=http://localhost:11311 ROS_PACKAGE_PATH=C:\\opt\\ros\\melodic\\x64\\share ROS_PYTHON_VERSION=2 ROS_ROOT=C:/opt/ros/melodic/x64/share/ros ROS_VERSION=1 >set path Path=C:/opt/rosdeps/x64\\bin;C:/opt/rosdeps/x64\\lib;C:/opt/ros/melodic/x64\\bin;C:/opt/ros/melodic/x64\\lib;... you should see this if Python (for ROS) is added to PATH >set path Path=...;C:\\opt\\python27amd64\\;C:\\opt\\python27amd64\\Scripts;... you should be able to use call Python from command line >python --version Python 2.7.15 create rosserial workspace, clone rosserial , and build note: please use ms-iot:init_windows on Windows until ms-iot changes are upstreamed back to ROS mainline mkdir c:\\ros\\catkin_ws\\rosserial\\src\\ && cd c:\\ros\\catkin_ws\\rosserial\\src\\ git clone https://github.com/ms-iot/rosserial.git -b init_windows cd .. catkin_make_isolated load rosserial environment just have just been built, and setup Arduino environment (assuming current work directory is still c:\\ros\\catkin_ws\\rosserial ) note: these steps are very similar to the steps (for Ubuntu) in rosserial_arduino tutorials .\\install_isolated\\setup.bat rosrun rosserial_arduino make_libraries.py . at this point, a new folder called ros_lib should have been generated, copy that to the library folder for Arduino library folder for Arduino could be found through these steps: launch Arduino Open File\\Preferences find Sketchbook location, the path would be <path>\\Arduino Arduino's library path would be <path>\\Arduino\\libraries check if ros_lib is installed correctly for Arduino launch Arduino (close and relaunch if needed) check File\\Examples there sould be ros_lib under Examples from Custom Libraries explore rosserial by following its tutorials note: certain #define flags need to be added for specific platforms, check rosserial_arduino for details - especially, add #define USE_USBCON for Arduino based on 32u4: Leonardo, Micro","title":"Install"},{"location":"Porting/Cookbook.html","text":"ROS for Windows Porting Cookbook While every effort has been made to reduce the effort needed to support ROS nodes on Windows, there will inevitably be required changes between platforms. This cookbook is intended to collect common issues and recommended solutions. Windows vs Linux $(find ...) idiom to package:// url In many cases in ROS, $(find ...) is used to locate a resource at runtime. However, the semantics are different on Windows and Linux. To alleviate this, please use package://<ros package id>/<resource> Paths and ROS commands Many ROS Commands are sensitive to the drive letter they are executed from. This manifests in problems such as rosdeps not resolving correctly. To address this either: * Put all of your ROS workspaces on the C:\\ drive * Link folders from your C:\\ drive to your workspaces. To link a folder on Windows, use the mklink to create a filesystem link from one drive to another.: mkdir d:\\workspaces mklink c:\\workspaces d:\\workspaces Visibility Windows and Linux handle symbol visibility differently. You may encounter a build error of the form: error C2448: '__attribute__': function-style initializer appears to be a function definition 'visibility': identifier not found The GCC visibility documentation has a good article on handling the compiler differences. This includes adding a header file which uses a compiler switch to select the correct visibility macro handler. install Library TARGETS given no DESTINATION! Windows will generate separate archives and librarys. To handle this, add an ARCHIVE destination: install( TARGETS ${PROJECT_NAME} ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION} LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}) All Warnings Warnings are good. The options for selecting warning level are different. If you add specific compiler options for warnings, please add an MSVC selection. For the Visual Studio compiler, you'll use /W3 for warning level 3 (or /W4 which offers more warning options). If you would like to treat warnings as errors pass /WX . However, these warnings would need to be corrected before the compile will succeed. if(MSVC) add_compile_options(/W3 /WX) else() add_compile_options(-Wall -Wextra) endif() You can disable specific warnings using #pragma : #ifdef _MSC_VER #pragma warning(disable: 4244) #pragma warning(disable: 4661) #endif Security Warnings Windows deprecates certain C APIs because they are inherently insecure. You will receive a message of the form: warning C4996: 'xxx': This function or variable may be unsafe. Consider using xxx_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. Consider using modern equivelents. If you cannot use a modern equivelent, you can add the following to your cmake files: add_definitions(\"/D_CRT_SECURE_NO_WARNINGS\") add_definitions(\"/D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS\") C++ versioning Use CMake to set the C++ version: if(NOT CMAKE_CXX_STANDARD) set(CMAKE_CXX_STANDARD 11) endif() _attribute _ _attribute _ is not suppported on MSVC. You can use a macro replacement or use a cross platform convention. Unresolved External Linux automatically exports symbols. Windows, symbols are private by default. CMake provides a facility for this . In your cmake: set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON) However, you may encounter a problem with static class members, i.e. global data symbols, as discussed in https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/. In this case you need to manually handle visibility of the static class members, using the GenerateExportHeader CMake module. In particular, if your static class members are contained in a library called mylibrary , you need to add the following lines in your CMake after the call to add_library(mylibrary ...) : include(GenerateExportHeader) generate_export_header(mylibrary) target_include_directories(mylibrary PRIVATE ${CMAKE_CURRENT_BINARY_DIR}) The generate_export_header(mylibrary) call creates a file called mylibrary_export.h , contained in the ${CMAKE_CURRENT_BINARY_DIR} build directory. This file contains the definition of the mylibrary_EXPORT macro, that you can use to modify your code as in the following: #include \"mylibrary_export.h\" class myclass { static mylibrary_EXPORT int GlobalCounter; \u2026 If this class definition is contained in a public header, you need to make sure to install the generated mylibrary_export.h together with the rest of the headers, i.e. : install(FILES ${CMAKE_CURRENT_BINARY_DIR}/mylibrary_export.h DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}) Beware of aggressive optimization The Microsoft compiler will optimize agressively. This can manifest in strange ways. One instance was in turtlebot3 fake code, is a ROS_ASSERT with a function that only returns true. Nothing else executed. Case sensitivity Linux is case sensitive, whereas Windows is not. We are trying to locate case sensitive areas and isolate them. This manifests in odd errors like this: RLException: multiple files named [turtlebot3_robot.launch] in package [turtlebot3_bringup]: - C:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch - c:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch In this case, the ROS_PACKAGE_PATH has a lower case drive letter. Python Shebang Windows does not support Shebang character sequence for automatically launching an interpreter. To support Python nodes on Windows, a few changes need to be made. Shebang in ROS nodes If a ROS node uses Python, please rename the file with the .py extension. Shebang in command line commands If you are producing a command line application which will be installed with Pip, please add a windows wrapper. Errors gtest-NOTFOUND This occurs when linking against gtest instead of ${GTEST_LIBRARIES} target_link_libraries( rtest ${GTEST_LIBRARIES} ${catkin_LIBRARIES} ) Boost::asio Winsock.h has already been included Cause: ROS includes Windows.h, but explicitly excludes Winsock.h. Boost's socket_types.h checks for this flag and assumes winsock.h was included. Fix: Add the following before boost/asio.hpp: #include <ros/ros.h> #ifdef WIN32 #include <winsock2.h> #endif #include <boost/asio.hpp> Missing Symbols 'M_PI' Add the following to the top of your file #define _USE_MATH_DEFINES Warnings The Microsoft Visual Studio compiler has strict type checking enabled by default. Here are some common warnings. Truncation '=': truncation from 'double' to float Use appropriate casts ensuring accuracy of the conversion. unreferenced parameters Either remove it, or reference it in a noop block uint8_t unused; unused;","title":"Cookbook"},{"location":"Porting/Cookbook.html#ros-for-windows-porting-cookbook","text":"While every effort has been made to reduce the effort needed to support ROS nodes on Windows, there will inevitably be required changes between platforms. This cookbook is intended to collect common issues and recommended solutions.","title":"ROS for Windows Porting Cookbook"},{"location":"Porting/Cookbook.html#windows-vs-linux","text":"","title":"Windows vs Linux"},{"location":"Porting/Cookbook.html#find-idiom-to-package-url","text":"In many cases in ROS, $(find ...) is used to locate a resource at runtime. However, the semantics are different on Windows and Linux. To alleviate this, please use package://<ros package id>/<resource>","title":"$(find ...) idiom to package:// url"},{"location":"Porting/Cookbook.html#paths-and-ros-commands","text":"Many ROS Commands are sensitive to the drive letter they are executed from. This manifests in problems such as rosdeps not resolving correctly. To address this either: * Put all of your ROS workspaces on the C:\\ drive * Link folders from your C:\\ drive to your workspaces. To link a folder on Windows, use the mklink to create a filesystem link from one drive to another.: mkdir d:\\workspaces mklink c:\\workspaces d:\\workspaces","title":"Paths and ROS commands"},{"location":"Porting/Cookbook.html#visibility","text":"Windows and Linux handle symbol visibility differently. You may encounter a build error of the form: error C2448: '__attribute__': function-style initializer appears to be a function definition 'visibility': identifier not found The GCC visibility documentation has a good article on handling the compiler differences. This includes adding a header file which uses a compiler switch to select the correct visibility macro handler.","title":"Visibility"},{"location":"Porting/Cookbook.html#install-library-targets-given-no-destination","text":"Windows will generate separate archives and librarys. To handle this, add an ARCHIVE destination: install( TARGETS ${PROJECT_NAME} ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION} LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION})","title":"install Library TARGETS given no DESTINATION!"},{"location":"Porting/Cookbook.html#all-warnings","text":"Warnings are good. The options for selecting warning level are different. If you add specific compiler options for warnings, please add an MSVC selection. For the Visual Studio compiler, you'll use /W3 for warning level 3 (or /W4 which offers more warning options). If you would like to treat warnings as errors pass /WX . However, these warnings would need to be corrected before the compile will succeed. if(MSVC) add_compile_options(/W3 /WX) else() add_compile_options(-Wall -Wextra) endif() You can disable specific warnings using #pragma : #ifdef _MSC_VER #pragma warning(disable: 4244) #pragma warning(disable: 4661) #endif","title":"All Warnings"},{"location":"Porting/Cookbook.html#security-warnings","text":"Windows deprecates certain C APIs because they are inherently insecure. You will receive a message of the form: warning C4996: 'xxx': This function or variable may be unsafe. Consider using xxx_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. Consider using modern equivelents. If you cannot use a modern equivelent, you can add the following to your cmake files: add_definitions(\"/D_CRT_SECURE_NO_WARNINGS\") add_definitions(\"/D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS\")","title":"Security Warnings"},{"location":"Porting/Cookbook.html#c-versioning","text":"Use CMake to set the C++ version: if(NOT CMAKE_CXX_STANDARD) set(CMAKE_CXX_STANDARD 11) endif()","title":"C++ versioning"},{"location":"Porting/Cookbook.html#_attribute_","text":"_attribute _ is not suppported on MSVC. You can use a macro replacement or use a cross platform convention.","title":"_attribute_"},{"location":"Porting/Cookbook.html#unresolved-external","text":"Linux automatically exports symbols. Windows, symbols are private by default. CMake provides a facility for this . In your cmake: set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON) However, you may encounter a problem with static class members, i.e. global data symbols, as discussed in https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/. In this case you need to manually handle visibility of the static class members, using the GenerateExportHeader CMake module. In particular, if your static class members are contained in a library called mylibrary , you need to add the following lines in your CMake after the call to add_library(mylibrary ...) : include(GenerateExportHeader) generate_export_header(mylibrary) target_include_directories(mylibrary PRIVATE ${CMAKE_CURRENT_BINARY_DIR}) The generate_export_header(mylibrary) call creates a file called mylibrary_export.h , contained in the ${CMAKE_CURRENT_BINARY_DIR} build directory. This file contains the definition of the mylibrary_EXPORT macro, that you can use to modify your code as in the following: #include \"mylibrary_export.h\" class myclass { static mylibrary_EXPORT int GlobalCounter; \u2026 If this class definition is contained in a public header, you need to make sure to install the generated mylibrary_export.h together with the rest of the headers, i.e. : install(FILES ${CMAKE_CURRENT_BINARY_DIR}/mylibrary_export.h DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION})","title":"Unresolved External"},{"location":"Porting/Cookbook.html#beware-of-aggressive-optimization","text":"The Microsoft compiler will optimize agressively. This can manifest in strange ways. One instance was in turtlebot3 fake code, is a ROS_ASSERT with a function that only returns true. Nothing else executed.","title":"Beware of aggressive optimization"},{"location":"Porting/Cookbook.html#case-sensitivity","text":"Linux is case sensitive, whereas Windows is not. We are trying to locate case sensitive areas and isolate them. This manifests in odd errors like this: RLException: multiple files named [turtlebot3_robot.launch] in package [turtlebot3_bringup]: - C:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch - c:\\ws\\turtlebot_ws\\install\\share\\turtlebot3_bringup\\launch\\turtlebot3_robot.launch In this case, the ROS_PACKAGE_PATH has a lower case drive letter.","title":"Case sensitivity"},{"location":"Porting/Cookbook.html#python","text":"","title":"Python"},{"location":"Porting/Cookbook.html#shebang","text":"Windows does not support Shebang character sequence for automatically launching an interpreter. To support Python nodes on Windows, a few changes need to be made.","title":"Shebang"},{"location":"Porting/Cookbook.html#shebang-in-ros-nodes","text":"If a ROS node uses Python, please rename the file with the .py extension.","title":"Shebang in ROS nodes"},{"location":"Porting/Cookbook.html#shebang-in-command-line-commands","text":"If you are producing a command line application which will be installed with Pip, please add a windows wrapper.","title":"Shebang in command line commands"},{"location":"Porting/Cookbook.html#errors","text":"","title":"Errors"},{"location":"Porting/Cookbook.html#gtest-notfound","text":"This occurs when linking against gtest instead of ${GTEST_LIBRARIES} target_link_libraries( rtest ${GTEST_LIBRARIES} ${catkin_LIBRARIES} )","title":"gtest-NOTFOUND"},{"location":"Porting/Cookbook.html#boostasio-winsockh-has-already-been-included","text":"","title":"Boost::asio Winsock.h has already been included"},{"location":"Porting/Cookbook.html#cause","text":"ROS includes Windows.h, but explicitly excludes Winsock.h. Boost's socket_types.h checks for this flag and assumes winsock.h was included.","title":"Cause:"},{"location":"Porting/Cookbook.html#fix","text":"Add the following before boost/asio.hpp: #include <ros/ros.h> #ifdef WIN32 #include <winsock2.h> #endif #include <boost/asio.hpp>","title":"Fix:"},{"location":"Porting/Cookbook.html#missing-symbols","text":"","title":"Missing Symbols"},{"location":"Porting/Cookbook.html#m_pi","text":"Add the following to the top of your file #define _USE_MATH_DEFINES","title":"'M_PI'"},{"location":"Porting/Cookbook.html#warnings","text":"The Microsoft Visual Studio compiler has strict type checking enabled by default. Here are some common warnings.","title":"Warnings"},{"location":"Porting/Cookbook.html#truncation","text":"'=': truncation from 'double' to float Use appropriate casts ensuring accuracy of the conversion.","title":"Truncation"},{"location":"Porting/Cookbook.html#unreferenced-parameters","text":"Either remove it, or reference it in a noop block uint8_t unused; unused;","title":"unreferenced parameters"},{"location":"Porting/PortingStatus.html","text":"Porting Status This page covers the current porting status of ROS1 on Windows. Plan Microsoft has been working with Open Robotics and ROS Industrial Consortium on the ROS for Windows porting logistics. Open Robotics has provided a list (below) of packages which need to be ported in order to not be considered experimental. Once tested and upstreamed, Open Robotics will consider Windows supported. We are targeting Mid-December to complete the ROS porting effort. October 2018 rViz Missing panels appear to be a timing issue which also repros on Linux. MoveIt First Life! We have MoveIt planning paths for a UR-3. Developing a program to close the loop with customers Navigation Workin on Cartographer port Working on other ports Started discussions about upstreaming. September 2018 Core ROS Core ROS has been ported ROSSerial We are observing some transport failures in the ROSSerial connection. rViz Subpanels, such as Display, do not show up consistently. We believe it is an optimization problem. We're working on this. Gazebo Port has not started Yet. This is a long port, which will start after MoveIt for Windows is completed. Turtlebot3 Turtlebot mostly brought up. Navigation in progress Perception Camera nodes Lidar OpenNI porting started. Navigation OpenKarto has been ported, but not tested. gmapping port has not started We will discuss other mapping projects with their maintainers MoveIt MoveIt port started Linux testing ROSComm in progress ROS# Testing has not started, but we believe it will work Packages to port Top 40 [X] python-catkin-pkg [X] python-catkin-pkg-modules [X] python-rosdep [X] python-rosdistro [X] python-rosdistro-modules [X] python-rospkg [X] python-rospkg-modules [X] ros-melodic-actionlib [X] ros-melodic-actionlib-msgs [X] ros-melodic-cv-bridge [X] ros-melodic-desktop [X] ros-melodic-desktop-full [X] ros-melodic-diagnostic-updater [X] ros-melodic-gazebo-plugins [X] ros-melodic-gazebo-ros [X] ros-melodic-geometry-msgs [X] ros-melodic-image-transport [X] ros-melodic-interactive-markers [X] ros-melodic-kdl-parser [X] ros-melodic-laser-geometry [X] ros-melodic-nav-msgs [X] ros-melodic-pcl-conversions [X] ros-melodic-pcl-msgs [X] ros-melodic-pcl-ros [X] ros-melodic-robot-state-publisher [X] ros-melodic-rqt-robot-plugins [X] ros-melodic-rqt-rviz [X] ros-melodic-rviz [X] ros-melodic-sensor-msgs [X] ros-melodic-simulators [X] ros-melodic-tf [X] ros-melodic-tf2 [X] ros-melodic-tf2-eigen [X] ros-melodic-tf2-geometry-msgs [X] ros-melodic-tf2-kdl [X] ros-melodic-tf2-msgs [X] ros-melodic-tf2-py [X] ros-melodic-tf2-ros [X] ros-melodic-tf-conversions [X] ros-melodic-viz","title":"What's New"},{"location":"Porting/PortingStatus.html#porting-status","text":"This page covers the current porting status of ROS1 on Windows.","title":"Porting Status"},{"location":"Porting/PortingStatus.html#plan","text":"Microsoft has been working with Open Robotics and ROS Industrial Consortium on the ROS for Windows porting logistics. Open Robotics has provided a list (below) of packages which need to be ported in order to not be considered experimental. Once tested and upstreamed, Open Robotics will consider Windows supported. We are targeting Mid-December to complete the ROS porting effort.","title":"Plan"},{"location":"Porting/PortingStatus.html#october-2018","text":"rViz Missing panels appear to be a timing issue which also repros on Linux. MoveIt First Life! We have MoveIt planning paths for a UR-3. Developing a program to close the loop with customers Navigation Workin on Cartographer port Working on other ports Started discussions about upstreaming.","title":"October 2018"},{"location":"Porting/PortingStatus.html#september-2018","text":"Core ROS Core ROS has been ported ROSSerial We are observing some transport failures in the ROSSerial connection. rViz Subpanels, such as Display, do not show up consistently. We believe it is an optimization problem. We're working on this. Gazebo Port has not started Yet. This is a long port, which will start after MoveIt for Windows is completed. Turtlebot3 Turtlebot mostly brought up. Navigation in progress Perception Camera nodes Lidar OpenNI porting started. Navigation OpenKarto has been ported, but not tested. gmapping port has not started We will discuss other mapping projects with their maintainers MoveIt MoveIt port started Linux testing ROSComm in progress ROS# Testing has not started, but we believe it will work","title":"September 2018"},{"location":"Porting/PortingStatus.html#packages-to-port","text":"Top 40 [X] python-catkin-pkg [X] python-catkin-pkg-modules [X] python-rosdep [X] python-rosdistro [X] python-rosdistro-modules [X] python-rospkg [X] python-rospkg-modules [X] ros-melodic-actionlib [X] ros-melodic-actionlib-msgs [X] ros-melodic-cv-bridge [X] ros-melodic-desktop [X] ros-melodic-desktop-full [X] ros-melodic-diagnostic-updater [X] ros-melodic-gazebo-plugins [X] ros-melodic-gazebo-ros [X] ros-melodic-geometry-msgs [X] ros-melodic-image-transport [X] ros-melodic-interactive-markers [X] ros-melodic-kdl-parser [X] ros-melodic-laser-geometry [X] ros-melodic-nav-msgs [X] ros-melodic-pcl-conversions [X] ros-melodic-pcl-msgs [X] ros-melodic-pcl-ros [X] ros-melodic-robot-state-publisher [X] ros-melodic-rqt-robot-plugins [X] ros-melodic-rqt-rviz [X] ros-melodic-rviz [X] ros-melodic-sensor-msgs [X] ros-melodic-simulators [X] ros-melodic-tf [X] ros-melodic-tf2 [X] ros-melodic-tf2-eigen [X] ros-melodic-tf2-geometry-msgs [X] ros-melodic-tf2-kdl [X] ros-melodic-tf2-msgs [X] ros-melodic-tf2-py [X] ros-melodic-tf2-ros [X] ros-melodic-tf-conversions [X] ros-melodic-viz","title":"Packages to port"},{"location":"Porting/ms-iot_payload.html","text":"ms-iot payloads for ROS on Windows packages List of repos redirected in rosdistro-db (ms-iot) : TODO: remove redirection to ms-iot repos without change all repos in init_windows branch unless specified * https://github.com/ms-iot/abseil-cpp.git * https://github.com/ms-iot/diagnostics.git * https://github.com/ms-iot/filters.git * https://github.com/ms-iot/gazebo_ros_pkgs.git * https://github.com/ms-iot/geometry.git * https://github.com/ms-iot/geometry2.git * https://github.com/ms-iot/image_common.git * https://github.com/ms-iot/industrial_core.git * https://github.com/ms-iot/interactive_markers.git * https://github.com/ms-iot/joystick_drivers.git * https://github.com/ms-iot/moveit.git * https://github.com/ms-iot/navigation.git * https://github.com/ms-iot/pluginlib.git * https://github.com/ms-iot/ros_comm.git * https://github.com/ms-iot/ros_environment.git * https://github.com/ms-iot/ros_tutorials.git * https://github.com/ms-iot/ros_type_introspection.git * https://github.com/ms-iot/rosserial.git * https://github.com/ms-iot/slam_karto.git * https://github.com/ms-iot/sparse_bundle_adjustment.git * https://github.com/ms-iot/stage-release.git * https://github.com/ms-iot/stage_ros.git * https://github.com/ms-iot/universal_robot.git * https://github.com/ms-iot/urdf.git * https://github.com/ms-iot/vision_opencv.git * https://github.com/ms-iot/descartes list of init_windows repos for current porting task with cached commits: 1st Tier Changes Packages in ros-melodic-ros_base . ros * ~~ms-iot/rosdistro-db~~ ros-infrastructure * ms-iot/rosdep * ms-iot/wstool * ms-iot/vcstools ros_core * ms-iot/pluginlib * ms-iot/ros_comm * ms-iot/ros_environment 2nd Tier Changes Packages beyond ros-melodic-ros_base , within ros-melodic-desktop_full . ros * ms-iot/diagnostics , need to merge https://github.com/ros/diagnostics/pull/96 after * ~~ms-iot/filters~~ * ms-iot/geometry * ms-iot/urdf * ms-iot/geometry2 * ms-iot/ros_tutorials ros-perception * ms-iot/image_common * ms-iot/vision_opencv ros-visualization * ms-iot/interactive_markers ros-simulation * ms-iot/gazebo_ros_pkgs * ~~ms-iot/stage_ros~~ * dependency * ~~ms-iot/stage-release~~ ros-planning * ms-iot/navigation 3rd Tier Changes Packages beyond ros-melodic-destkop_full . moveit * ms-iot/moveit universal_robot * ms-iot/universal_robot ros_type_introspection * ms-iot/ros_type_introspection * dependency * ms-iot/abseil-cpp others * ms-iot/industrial_core * ms-iot/joystick_drivers * ms-iot/rosserial * ~~ms-iot/slam_karto~~ * ms-iot/sparse_bundle_adjustment * ms-iot/descartes Other informations The progress of upstream is tracked under projects . Open pull requests from MSFT contributors pull requests from @johnsonshih pull requests from @kejxu pull requests from @seanyen","title":"ms-iot payloads for ROS on Windows packages"},{"location":"Porting/ms-iot_payload.html#ms-iot-payloads-for-ros-on-windows-packages","text":"","title":"ms-iot payloads for ROS on Windows packages"},{"location":"Porting/ms-iot_payload.html#list-of-repos-redirected-in-rosdistro-db-ms-iot","text":"TODO: remove redirection to ms-iot repos without change all repos in init_windows branch unless specified * https://github.com/ms-iot/abseil-cpp.git * https://github.com/ms-iot/diagnostics.git * https://github.com/ms-iot/filters.git * https://github.com/ms-iot/gazebo_ros_pkgs.git * https://github.com/ms-iot/geometry.git * https://github.com/ms-iot/geometry2.git * https://github.com/ms-iot/image_common.git * https://github.com/ms-iot/industrial_core.git * https://github.com/ms-iot/interactive_markers.git * https://github.com/ms-iot/joystick_drivers.git * https://github.com/ms-iot/moveit.git * https://github.com/ms-iot/navigation.git * https://github.com/ms-iot/pluginlib.git * https://github.com/ms-iot/ros_comm.git * https://github.com/ms-iot/ros_environment.git * https://github.com/ms-iot/ros_tutorials.git * https://github.com/ms-iot/ros_type_introspection.git * https://github.com/ms-iot/rosserial.git * https://github.com/ms-iot/slam_karto.git * https://github.com/ms-iot/sparse_bundle_adjustment.git * https://github.com/ms-iot/stage-release.git * https://github.com/ms-iot/stage_ros.git * https://github.com/ms-iot/universal_robot.git * https://github.com/ms-iot/urdf.git * https://github.com/ms-iot/vision_opencv.git * https://github.com/ms-iot/descartes","title":"List of repos redirected in rosdistro-db (ms-iot):"},{"location":"Porting/ms-iot_payload.html#list-of-init_windows-repos-for-current-porting-task-with-cached-commits","text":"","title":"list of init_windows repos for current porting task with cached commits:"},{"location":"Porting/ms-iot_payload.html#1st-tier-changes","text":"Packages in ros-melodic-ros_base . ros * ~~ms-iot/rosdistro-db~~ ros-infrastructure * ms-iot/rosdep * ms-iot/wstool * ms-iot/vcstools ros_core * ms-iot/pluginlib * ms-iot/ros_comm * ms-iot/ros_environment","title":"1st Tier Changes"},{"location":"Porting/ms-iot_payload.html#2nd-tier-changes","text":"Packages beyond ros-melodic-ros_base , within ros-melodic-desktop_full . ros * ms-iot/diagnostics , need to merge https://github.com/ros/diagnostics/pull/96 after * ~~ms-iot/filters~~ * ms-iot/geometry * ms-iot/urdf * ms-iot/geometry2 * ms-iot/ros_tutorials ros-perception * ms-iot/image_common * ms-iot/vision_opencv ros-visualization * ms-iot/interactive_markers ros-simulation * ms-iot/gazebo_ros_pkgs * ~~ms-iot/stage_ros~~ * dependency * ~~ms-iot/stage-release~~ ros-planning * ms-iot/navigation","title":"2nd Tier Changes"},{"location":"Porting/ms-iot_payload.html#3rd-tier-changes","text":"Packages beyond ros-melodic-destkop_full . moveit * ms-iot/moveit universal_robot * ms-iot/universal_robot ros_type_introspection * ms-iot/ros_type_introspection * dependency * ms-iot/abseil-cpp others * ms-iot/industrial_core * ms-iot/joystick_drivers * ms-iot/rosserial * ~~ms-iot/slam_karto~~ * ms-iot/sparse_bundle_adjustment * ms-iot/descartes","title":"3rd Tier Changes"},{"location":"Porting/ms-iot_payload.html#other-informations","text":"The progress of upstream is tracked under projects .","title":"Other informations"},{"location":"Porting/ms-iot_payload.html#open-pull-requests-from-msft-contributors","text":"pull requests from @johnsonshih pull requests from @kejxu pull requests from @seanyen","title":"Open pull requests from MSFT contributors"},{"location":"Turtlebot/Turtlebot3.html","text":"Turtlebot 3 Getting Started with the Turtlebot 3 running Windows. The ROS for Ubuntu documentation is located at the Robotis website . The documentation on this page will describe the differences between Ubuntu and Windows. Windows Requirements Windows Software The Turtlebot 3 uses a Lidar which requires the following driver. + CP2102 Driver Guide General notes The turtlebot documentation uses the unix command 'export' to set environment variables, instead use the following: set TURTLEBOT3_MODEL=waffle NOTE: The value of %TURTLEBOT3_MODEL% is case-sensitive. Please use turtlebot3_bringup-win.launch which has Windows device bindings. Setup PC Setup Please follow the instructions for setting up your computer with ROS on Windows . SBC Setup You can bypass this section OpenCR Setup Please follow the Windows instructions for the Robotis OpenCR board in the Robotis Manual . Before proceeding, make sure the motors turn by pressing the motor test buttons near the USB connector. BUG: We're working to identify a sync error coming from rosserial, which ultimately leads to a board reset. Compatible devices ROS on Windows requires a x64 bit Windows 10 Desktop or Windows 10 IoT Enterprise, and compatible hardware. ROS on Windows was brought up using Up2 and an Intel Nuc. Create a new workspace In a Command Window set up with the ROS environment, create a directory for your robot workspaces and a workspace for turtlebot. mkdir c:\\ws\\turtlebot3\\src cd c:\\ws\\turtlebot3\\src catkin_init_workspace git clone -b melodic-devel https://github.com/ROBOTIS-GIT/turtlebot3_msgs git clone -b melodic-devel https://github.com/ms-iot/turtlebot3_simulations git clone -b melodic-devel https://github.com/ms-iot/turtlebot3.git git clone -b melodic-devel https://github.com/ms-iot/hls_lfcd_lds_driver cd c:\\ws\\turtlebot3 rosdep update rosdep install --from-paths src --ignore-src -r -y Customize Turtlebot Launch Files Modify the ROS Launch files to map the devices to the correct COM port. To determine which COM ports you require, right click on the Windows Start Menu, Select Device Manager. Under the Ports (COM & LPT) node: * USB Serial Debice (COMx) is the OpenCR board. * Silicon Labs CP210x USB to UART Bridge (COMy) is the Lidar Enter the COM port in the correct fields in the launch files below: turtlebot3_bringup/launch/turtlebot3_core-win.launch <node pkg=\"rosserial_python\" type=\"serial_node.py\" name=\"turtlebot3_core\" output=\"screen\"> <param name=\"port\" value=\"COMx\"/> turtlebot3_bringup/launch/turtlebot3_lidar-win.launch <node pkg=\"hls_lfcd_lds_driver\" type=\"hlds_laser_publisher\" name=\"turtlebot3_lds\" output=\"screen\"> <param name=\"port\" value=\"COMy\"/> Build Nodes To build the turtlebot packages, enter the turtlebot3 workspace and build using the catkin build system. :: make sure all required binaries installed. choco upgrade ros-melodic-desktop_full -y :: build Turtlebot3 workspace. cd c:\\ws\\turtlebot3 catkin_make Now inform ROS where to find your turtlebot code by merging the turtlebot install environment with the ROS environment. Please ensure you do this every time you open a command window. c:\\ws\\turtlebot3\\devel\\setup.bat If you forget to merge the turtlebot environment by calling the setup batch file, you'll get an error such as this: RLException: [turtlebot3_robot.launch] is neither a launch file in package [turtlebot3_bringup] nor is [turtlebot3_bringup] a launch file name Running Turtlebot No Robot - No Problem! rViz is tool which allows you to visualize a representation of a robot, and project fake data in order to exerise or develop logic. The turtlebot simulation is in the turtlebot3_simulations package. To start the simulation, open one elevated command prompt: c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_fake turtlebot3_fake.launch Then, open another elevated command prompt: c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_gazebo turtlebot3_simulation.launch Now you should see turtlebot3 random walking on RViz. You can create your own logic which reads /odom or publish /cmd_vel to move the virtual robot. Let's try out something more! SLAM (Simultaneous localization and mapping) is a very popular application in the mobile robots, and with the simulator - Gazebo, you can exercise this technology on your Windows desktop, even without a real robot. To start this demo, open an evelated command prompt: :: make sure all required binaries installed. choco upgrade ros-melodic-desktop_full -y choco upgrade ros-melodic-cartographer_ros -y :: run the demo. c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_gazebo turtlebot3_gazebo_cartographer_demo.launch After a few moments, you will see Gazebo running a simulated world with your simulated turtlebot, RViz running the mapping progress, and a simulation node to drive the turtlebot random walking. Run Turtlebot3 with Sensors connected to your development machine. If you have Turtlebot3 hardware, you can plug the sensors directly into your development machine to iterate on fuctionality with your development machine. Perform the steps to set up the launch file for your development system. In one command window, start roscore . In another command window, launch the turtlebot robot code. roslaunch turtlebot3_bringup turtlebot3_robot.launch","title":"TurtuleBot 3"},{"location":"Turtlebot/Turtlebot3.html#turtlebot-3","text":"Getting Started with the Turtlebot 3 running Windows. The ROS for Ubuntu documentation is located at the Robotis website . The documentation on this page will describe the differences between Ubuntu and Windows.","title":"Turtlebot 3"},{"location":"Turtlebot/Turtlebot3.html#windows-requirements","text":"","title":"Windows Requirements"},{"location":"Turtlebot/Turtlebot3.html#windows-software","text":"The Turtlebot 3 uses a Lidar which requires the following driver. + CP2102 Driver","title":"Windows Software"},{"location":"Turtlebot/Turtlebot3.html#guide","text":"","title":"Guide"},{"location":"Turtlebot/Turtlebot3.html#general-notes","text":"The turtlebot documentation uses the unix command 'export' to set environment variables, instead use the following: set TURTLEBOT3_MODEL=waffle NOTE: The value of %TURTLEBOT3_MODEL% is case-sensitive. Please use turtlebot3_bringup-win.launch which has Windows device bindings.","title":"General notes"},{"location":"Turtlebot/Turtlebot3.html#setup","text":"","title":"Setup"},{"location":"Turtlebot/Turtlebot3.html#pc-setup","text":"Please follow the instructions for setting up your computer with ROS on Windows .","title":"PC Setup"},{"location":"Turtlebot/Turtlebot3.html#sbc-setup","text":"You can bypass this section","title":"SBC Setup"},{"location":"Turtlebot/Turtlebot3.html#opencr-setup","text":"Please follow the Windows instructions for the Robotis OpenCR board in the Robotis Manual . Before proceeding, make sure the motors turn by pressing the motor test buttons near the USB connector. BUG: We're working to identify a sync error coming from rosserial, which ultimately leads to a board reset.","title":"OpenCR Setup"},{"location":"Turtlebot/Turtlebot3.html#compatible-devices","text":"ROS on Windows requires a x64 bit Windows 10 Desktop or Windows 10 IoT Enterprise, and compatible hardware. ROS on Windows was brought up using Up2 and an Intel Nuc.","title":"Compatible devices"},{"location":"Turtlebot/Turtlebot3.html#create-a-new-workspace","text":"In a Command Window set up with the ROS environment, create a directory for your robot workspaces and a workspace for turtlebot. mkdir c:\\ws\\turtlebot3\\src cd c:\\ws\\turtlebot3\\src catkin_init_workspace git clone -b melodic-devel https://github.com/ROBOTIS-GIT/turtlebot3_msgs git clone -b melodic-devel https://github.com/ms-iot/turtlebot3_simulations git clone -b melodic-devel https://github.com/ms-iot/turtlebot3.git git clone -b melodic-devel https://github.com/ms-iot/hls_lfcd_lds_driver cd c:\\ws\\turtlebot3 rosdep update rosdep install --from-paths src --ignore-src -r -y","title":"Create a new workspace"},{"location":"Turtlebot/Turtlebot3.html#customize-turtlebot-launch-files","text":"Modify the ROS Launch files to map the devices to the correct COM port. To determine which COM ports you require, right click on the Windows Start Menu, Select Device Manager. Under the Ports (COM & LPT) node: * USB Serial Debice (COMx) is the OpenCR board. * Silicon Labs CP210x USB to UART Bridge (COMy) is the Lidar Enter the COM port in the correct fields in the launch files below: turtlebot3_bringup/launch/turtlebot3_core-win.launch <node pkg=\"rosserial_python\" type=\"serial_node.py\" name=\"turtlebot3_core\" output=\"screen\"> <param name=\"port\" value=\"COMx\"/> turtlebot3_bringup/launch/turtlebot3_lidar-win.launch <node pkg=\"hls_lfcd_lds_driver\" type=\"hlds_laser_publisher\" name=\"turtlebot3_lds\" output=\"screen\"> <param name=\"port\" value=\"COMy\"/>","title":"Customize Turtlebot Launch Files"},{"location":"Turtlebot/Turtlebot3.html#build-nodes","text":"To build the turtlebot packages, enter the turtlebot3 workspace and build using the catkin build system. :: make sure all required binaries installed. choco upgrade ros-melodic-desktop_full -y :: build Turtlebot3 workspace. cd c:\\ws\\turtlebot3 catkin_make Now inform ROS where to find your turtlebot code by merging the turtlebot install environment with the ROS environment. Please ensure you do this every time you open a command window. c:\\ws\\turtlebot3\\devel\\setup.bat If you forget to merge the turtlebot environment by calling the setup batch file, you'll get an error such as this: RLException: [turtlebot3_robot.launch] is neither a launch file in package [turtlebot3_bringup] nor is [turtlebot3_bringup] a launch file name","title":"Build Nodes"},{"location":"Turtlebot/Turtlebot3.html#running-turtlebot","text":"","title":"Running Turtlebot"},{"location":"Turtlebot/Turtlebot3.html#no-robot-no-problem","text":"rViz is tool which allows you to visualize a representation of a robot, and project fake data in order to exerise or develop logic. The turtlebot simulation is in the turtlebot3_simulations package. To start the simulation, open one elevated command prompt: c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_fake turtlebot3_fake.launch Then, open another elevated command prompt: c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_gazebo turtlebot3_simulation.launch Now you should see turtlebot3 random walking on RViz. You can create your own logic which reads /odom or publish /cmd_vel to move the virtual robot.","title":"No Robot - No Problem!"},{"location":"Turtlebot/Turtlebot3.html#lets-try-out-something-more","text":"SLAM (Simultaneous localization and mapping) is a very popular application in the mobile robots, and with the simulator - Gazebo, you can exercise this technology on your Windows desktop, even without a real robot. To start this demo, open an evelated command prompt: :: make sure all required binaries installed. choco upgrade ros-melodic-desktop_full -y choco upgrade ros-melodic-cartographer_ros -y :: run the demo. c:\\opt\\ros\\melodic\\x64\\setup.bat c:\\ws\\turtlebot3\\devel\\setup.bat set TURTLEBOT3_MODEL=waffle roslaunch turtlebot3_gazebo turtlebot3_gazebo_cartographer_demo.launch After a few moments, you will see Gazebo running a simulated world with your simulated turtlebot, RViz running the mapping progress, and a simulation node to drive the turtlebot random walking.","title":"Let's try out something more!"},{"location":"Turtlebot/Turtlebot3.html#run-turtlebot3-with-sensors-connected-to-your-development-machine","text":"If you have Turtlebot3 hardware, you can plug the sensors directly into your development machine to iterate on fuctionality with your development machine. Perform the steps to set up the launch file for your development system. In one command window, start roscore . In another command window, launch the turtlebot robot code. roslaunch turtlebot3_bringup turtlebot3_robot.launch","title":"Run Turtlebot3 with Sensors connected to your development machine."}]}